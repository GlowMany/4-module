"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReaderFactory = void 0;
const fs = __importStar(require("fs"));
const github_reader_1 = require("./github-reader");
const ipfs_reader_1 = require("./ipfs-reader");
const local_reader_1 = require("./local-reader");
const CIDv0 = new RegExp(/Qm[1-9A-Za-z]{44}[^OIl]/i);
const CIDv1 = new RegExp(/Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,}/i);
class ReaderFactory {
    static create(location, options) {
        // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
        const githubMatch = location.match(/https:\/\/github.com\/([\w-_]+\/[\w-_]+)/i);
        if (githubMatch) {
            return new github_reader_1.GithubReader(githubMatch[1]);
        }
        const locationWithoutSchema = location.replace('ipfs://', '');
        if (CIDv0.test(locationWithoutSchema) || CIDv1.test(locationWithoutSchema)) {
            return new ipfs_reader_1.IPFSReader(locationWithoutSchema, options.ipfs);
        }
        const stats = fs.statSync(location);
        if (stats.isDirectory()) {
            return new local_reader_1.LocalReader(location);
        }
        throw new Error(`unknown location: ${location}`);
    }
}
exports.ReaderFactory = ReaderFactory;
//# sourceMappingURL=reader.js.map