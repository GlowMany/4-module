{"version":3,"file":"github-reader.js","sourceRoot":"","sources":["../../src/readers/github-reader.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,gDAAwB;AACxB,kDAA2C;AAC3C,sDAA2B;AAI3B,MAAa,YAAY;IAIvB,YAA6B,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;QACtC,IAAI,CAAC,GAAG,GAAG,eAAK,CAAC,MAAM,CAAC;YACtB,OAAO,EAAE,qCAAqC,GAAG,EAAE;SACpD,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,MAAM;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,QAAgB;QAC5B,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC7C,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE/D,MAAM,EAAC,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEnC,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,MAAM,EAAE;gBACrC,OAAO,iBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxB;YAED,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAEO,KAAK,CAAC,gBAAgB;QAC5B,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,OAAO,IAAI,CAAC,aAAa,CAAC;SAC3B;QACD,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;CACF;AA3CD,oCA2CC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport axios, {AxiosInstance} from 'axios';\nimport yaml from 'js-yaml';\nimport {IPackageJson} from 'package-json-type';\nimport {Reader} from './reader';\n\nexport class GithubReader implements Reader {\n  private readonly api: AxiosInstance;\n  private defaultBranch: string;\n\n  constructor(private readonly key: string) {\n    this.api = axios.create({\n      baseURL: `https://raw.githubusercontent.com/${key}`,\n    });\n  }\n\n  async getPkg(): Promise<IPackageJson | undefined> {\n    return this.getFile('package.json');\n  }\n\n  async getProjectSchema(): Promise<unknown | undefined> {\n    return this.getFile('project.yaml');\n  }\n\n  async getFile(fileName: string): Promise<unknown | undefined> {\n    try {\n      const branch = await this.getDefaultBranch();\n      const {data} = await this.api.get(path.join(branch, fileName));\n\n      const {ext} = path.parse(fileName);\n\n      if (ext === '.yaml' || ext === '.yml') {\n        return yaml.load(data);\n      }\n\n      return data;\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  private async getDefaultBranch(): Promise<string> {\n    if (this.defaultBranch) {\n      return this.defaultBranch;\n    }\n    const {data} = await axios.get(`https://api.github.com/repos/${this.key}`);\n    this.defaultBranch = data.default_branch;\n    return this.defaultBranch;\n  }\n}\n"]}