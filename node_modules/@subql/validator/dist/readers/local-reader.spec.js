"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const local_reader_1 = require("./local-reader");
describe('LocalReader', () => {
    let reader;
    beforeAll(() => {
        const loc = path.join(__dirname, '../../fixtures');
        reader = new local_reader_1.LocalReader(loc);
    });
    it('should return the package json object', async () => {
        const data = await reader.getPkg();
        expect(data.name).toBe('subquery-starter');
    });
    it('should return the project schema object', async () => {
        const data = await reader.getProjectSchema();
        expect(data.repository).toBe('https://github.com/subquery/subql-starter');
    });
});
//# sourceMappingURL=local-reader.spec.js.map