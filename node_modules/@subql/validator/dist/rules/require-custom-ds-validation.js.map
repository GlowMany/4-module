{"version":3,"file":"require-custom-ds-validation.js","sourceRoot":"","sources":["../../src/rules/require-custom-ds-validation.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,gDAAwB;AACxB,0CAAyC;AAGzC,iCAAsC;AAEtC,MAAa,yBAAyB;IAAtC;QACE,SAAI,GAAG,eAAQ,CAAC,MAAM,CAAC;QACvB,SAAI,GAAG,8BAA8B,CAAC;QACtC,gBAAW,GAAG,mDAAmD,CAAC;IAqCpE,CAAC;IAnCC,QAAQ,CAAC,GAAY;QACnB,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAE/B,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,mBAAU,CAAC,EAAE;gBAC5D,MAAM,SAAS,GAAyD,OAAO,CAAC,cAAI,CAAC,OAAO,CAC1F,GAAG,CAAC,IAAI,CAAC,WAAW,EACpB,QAAQ,CAAC,SAAS,CAAC,IAAI,CACxB,CAAC,CAAC,OAAO,CAAC;gBAEX,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,EAAE;oBACpC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,QAAQ,CAAC,IAAI,6BAA6B,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;oBACxF,OAAO,KAAK,CAAC;iBACd;gBAED,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE;oBAC/C,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,iBAAiB,CAAC,EAAE;wBAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,OAAO,CAAC,IAAI,eAAe,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBAC5G,OAAO,KAAK,CAAC;qBACd;iBACF;gBAED,IAAI;oBACF,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACxC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAC1E,CAAC;iBACH;gBAAC,OAAO,CAAC,EAAE;oBACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBACtD,OAAO,KAAK,CAAC;iBACd;aACF;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAxCD,8DAwCC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {isCustomDs} from '@subql/common';\nimport {SubqlDatasourceProcessor, SubqlNetworkFilter} from '@subql/types';\nimport {Context} from '../context';\nimport {Rule, RuleType} from './rule';\n\nexport class RequireCustomDsValidation implements Rule {\n  type = RuleType.Schema;\n  name = 'require-custom-ds-validation';\n  description = 'custom datasources mast pass processor validation';\n\n  validate(ctx: Context): boolean {\n    const schema = ctx.data.schema;\n\n    if (schema.isV0_2_0) {\n      for (const customDs of schema.dataSources.filter(isCustomDs)) {\n        const processor: SubqlDatasourceProcessor<string, SubqlNetworkFilter> = require(path.resolve(\n          ctx.data.projectPath,\n          customDs.processor.file\n        )).default;\n\n        if (customDs.kind !== processor.kind) {\n          ctx.logger.log(`ds kind (${customDs.kind}) doesnt match processor (${processor.kind})`);\n          return false;\n        }\n\n        for (const handler of customDs.mapping.handlers) {\n          if (!(handler.kind in processor.handlerProcessors)) {\n            ctx.logger.log(`ds kind ${handler.kind} not one of ${Object.keys(processor.handlerProcessors).join(', ')}`);\n            return false;\n          }\n        }\n\n        try {\n          customDs.mapping.handlers.map((handler) =>\n            processor.handlerProcessors[handler.kind].filterValidator(handler.filter)\n          );\n        } catch (e) {\n          ctx.logger.log(`Invalid filter for DS: ${e.message}`);\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n"]}