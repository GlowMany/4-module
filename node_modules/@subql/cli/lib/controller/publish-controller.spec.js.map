{"version":3,"file":"publish-controller.spec.js","sourceRoot":"","sources":["../../src/controller/publish-controller.spec.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,+EAAyC;AACzC,yDAAoB;AACpB,yDAAoB;AACpB,6DAAwB;AACxB,+BAA+B;AAC/B,0CAAkD;AAClD,iEAA4B;AAC5B,2EAAsC;AACtC,+EAA0C;AAC1C,iFAA4C;AAE5C,uDAAgD;AAChD,6DAAkD;AAElD,MAAM,iBAAiB,GAAsB;IAC3C,IAAI,EAAE,gBAAgB;IACtB,UAAU,EAAE,EAAE;IACd,QAAQ,EAAE,iCAAiC;IAC3C,MAAM,EAAE,KAAK;IACb,WAAW,EAAE,kCAAkC;IAC/C,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,EAAE;CACZ,CAAC;AAEF,MAAM,iBAAiB,GAAsB;IAC3C,IAAI,EAAE,gBAAgB;IACtB,UAAU,EAAE,EAAE;IACd,WAAW,EAAE,oEAAoE;IACjF,MAAM,EAAE,KAAK;IACb,WAAW,EAAE,kCAAkC;IAC/C,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,EAAE;IACX,QAAQ,EAAE,iCAAiC;CAC5C,CAAC;AAEF,MAAM,YAAY,GAAG,qCAAqC,CAAC;AAE3D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAExB,KAAK,UAAU,iBAAiB,CAAC,WAA4B;IAC3D,MAAM,MAAM,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,YAAE,CAAC,MAAM,EAAE,GAAG,cAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACtE,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;IAEvD,MAAM,IAAA,+BAAa,EAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAEzC,uBAAuB;IACvB,uBAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC;IAElD,MAAM,iBAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IACtC,MAAM,eAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IAEpC,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,UAAkB,CAAC;IAEvB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,IAAI;YACF,MAAM,IAAA,gBAAS,EAAC,gBAAM,CAAC,CAAC,UAAU,CAAC,CAAC;SACrC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,UAAU,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAExD,MAAM,MAAM,CAAC,IAAA,iCAAY,EAAC,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,UAAU,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,IAAA,iCAAY,EAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAEzD,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,MAAM,MAAM,CAAC,kBAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,UAAU,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAExD,MAAM,MAAM,CAAC,IAAA,iCAAY,EAAC,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,UAAU,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACxD,MAAM,mBAAmB,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACrE,MAAM,QAAQ,GAAG,IAAA,4BAAmB,EAAC,mBAAmB,CAAC,CAAC,MAAM,CAAC;QACjE,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,YAAY,CAChD,qFAAqF,CACtF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,UAAU,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACxD,MAAM,mBAAmB,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACrE,MAAM,QAAQ,GAAG,IAAA,4BAAmB,EAAC,mBAAmB,CAAC,CAAC,MAAM,CAAC;QACjE,MAAM,UAAU,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC3C,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAChD,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAE/C,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC5C,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC5C,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport childProcess from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {loadProjectManifest} from '@subql/common';\nimport rimraf from 'rimraf';\nimport Build from '../commands/build';\nimport Codegen from '../commands/codegen';\nimport Validate from '../commands/validate';\nimport {ProjectSpecBase, ProjectSpecV0_0_1, ProjectSpecV0_2_0} from '../types';\nimport {createProject} from './init-controller';\nimport {uploadToIpfs} from './publish-controller';\n\nconst projectSpecV0_0_1: ProjectSpecV0_0_1 = {\n  name: 'mocked_starter',\n  repository: '',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n};\n\nconst projectSpecV0_2_0: ProjectSpecV0_2_0 = {\n  name: 'mocked_starter',\n  repository: '',\n  genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n};\n\nconst ipfsEndpoint = 'https://ipfs.thechainhub.com/api/v0';\n\njest.setTimeout(120000);\n\nasync function createTestProject(projectSpec: ProjectSpecBase): Promise<string> {\n  const tmpdir = await fs.promises.mkdtemp(`${os.tmpdir()}${path.sep}`);\n  const projectDir = path.join(tmpdir, projectSpec.name);\n\n  await createProject(tmpdir, projectSpec);\n\n  // Install dependencies\n  childProcess.execSync(`npm i`, {cwd: projectDir});\n\n  await Codegen.run(['-l', projectDir]);\n  await Build.run(['-l', projectDir]);\n\n  return projectDir;\n}\n\ndescribe('Cli publish', () => {\n  let projectDir: string;\n\n  afterEach(async () => {\n    try {\n      await promisify(rimraf)(projectDir);\n    } catch (e) {\n      console.warn('Failed to clean up tmp dir after test');\n    }\n  });\n\n  it('should not allow uploading a v0.0.1 spec version project', async () => {\n    projectDir = await createTestProject(projectSpecV0_0_1);\n\n    await expect(uploadToIpfs(ipfsEndpoint, projectDir)).rejects.toBeDefined();\n  });\n\n  it('should upload appropriate files to IPFS', async () => {\n    projectDir = await createTestProject(projectSpecV0_2_0);\n    const cid = await uploadToIpfs(ipfsEndpoint, projectDir);\n\n    expect(cid).toBeDefined();\n    await expect(Validate.run(['-l', cid, '--ipfs', ipfsEndpoint])).resolves.toBe(undefined);\n  });\n\n  it('should not allow uploading a v0.0.1 spec version project', async () => {\n    projectDir = await createTestProject(projectSpecV0_0_1);\n\n    await expect(uploadToIpfs(ipfsEndpoint, projectDir)).rejects.toBeDefined();\n  });\n\n  it('throw error when v0.0.1 try to deploy', async () => {\n    projectDir = await createTestProject(projectSpecV0_0_1);\n    const projectManifestPath = path.resolve(projectDir, 'project.yaml');\n    const manifest = loadProjectManifest(projectManifestPath).asImpl;\n    expect(() => manifest.toDeployment()).toThrowError(\n      'Manifest spec 0.0.1 is not support for deployment, please migrate to 0.2.0 or above'\n    );\n  });\n\n  it('convert to deployment and removed descriptive field', async () => {\n    projectDir = await createTestProject(projectSpecV0_2_0);\n    const projectManifestPath = path.resolve(projectDir, 'project.yaml');\n    const manifest = loadProjectManifest(projectManifestPath).asImpl;\n    const deployment = manifest.toDeployment();\n    expect(deployment).not.toContain('name');\n    expect(deployment).not.toContain('author');\n    expect(deployment).not.toContain('endpoint');\n    expect(deployment).not.toContain('dictionary');\n    expect(deployment).not.toContain('description');\n    expect(deployment).not.toContain('repository');\n\n    expect(deployment).toContain('genesisHash');\n    expect(deployment).toContain('specVersion');\n    expect(deployment).toContain('dataSources');\n  });\n});\n"]}