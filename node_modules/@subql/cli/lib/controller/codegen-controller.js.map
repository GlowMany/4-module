{"version":3,"file":"codegen-controller.js","sourceRoot":"","sources":["../../src/controller/codegen-controller.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;AAEtC,yDAAoB;AACpB,6DAAwB;AACxB,+BAA+B;AAC/B,0CAUuB;AACvB,2DAAsB;AACtB,mCAAkC;AAClC,iEAA4B;AAE5B,MAAM,mBAAmB,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;AAChF,MAAM,0BAA0B,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC;AAC9F,MAAM,yBAAyB,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,gCAAgC,CAAC,CAAC;AAC5F,MAAM,uBAAuB,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC;AACxF,MAAM,kBAAkB,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;AAC9E,MAAM,aAAa,GAAG,WAAW,CAAC;AAClC,MAAM,cAAc,GAAG,kBAAkB,CAAC;AAC1C,MAAM,WAAW,GAAG;IAClB,MAAM,EAAE,KAAK;IACb,UAAU,EAAE,KAAK;IACjB,KAAK,EAAE,KAAK;CACb,CAAC;AAEF,qDAAqD;AAC9C,KAAK,UAAU,cAAc,CAAC,YAAoB,EAAE,UAAkB,EAAE,YAAsB;IACnG,MAAM,IAAI,GAAG,MAAM,aAAG,CAAC,UAAU,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAC9D,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAChD,CAAC;AAHD,wCAGC;AAcM,KAAK,UAAU,sBAAsB,CAAC,WAAmB,EAAE,MAAc;IAC9E,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACvD,MAAM,WAAW,GAAG,IAAA,0BAAiB,EAAC,MAAM,CAAC,CAAC;IAC9C,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QAC3C,MAAM,MAAM,GAAG,IAAA,0BAAiB,EAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QACjD,MAAM,MAAM,GAAG,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACtE,OAAO;YACL,aAAa,EAAE,MAAM,CAAC,IAAI;YAC1B,MAAM;SACP,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/B,MAAM,iBAAiB,GAAG;YACxB,KAAK,EAAE;gBACL,cAAc;aACf;YACD,MAAM,EAAE;gBACN,UAAU,EAAV,mBAAU;aACX;SACF,CAAC;QACF,IAAI;YACF,MAAM,cAAc,CAAC,uBAAuB,EAAE,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,EAAE,iBAAiB,CAAC,CAAC;YACvG,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC;SAC/B;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;KACF;AACH,CAAC;AA5BD,wDA4BC;AAEM,KAAK,UAAU,aAAa,CAAC,WAAmB,EAAE,MAAc;IACrE,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACvD,MAAM,WAAW,GAAG,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAC;IACxC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QAClC,OAAO;YACL,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,MAAM,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SACzC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,MAAM,aAAa,GAAG;YACpB,KAAK,EAAE;gBACL,KAAK;aACN;SACF,CAAC;QACF,IAAI;YACF,MAAM,cAAc,CAAC,kBAAkB,EAAE,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,aAAa,CAAC,CAAC;YACzF,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC;SAC1B;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACvD;KACF;AACH,CAAC;AAvBD,sCAuBC;AAED,SAAgB,aAAa,CAC3B,IAA4B,EAC5B,SAAiB,EACjB,MAAqD,EACrD,cAAoC,EAAE;IAEtC,MAAM,SAAS,GAAqB,EAAE,CAAC;IACvC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,QAAQ,EAAE,CAAC,KAAK,CAAC,QAAQ;YACzB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,MAAM,EAAE,KAAK;SACI,CAAC;QACpB,IAAI,IAAI,KAAK,QAAQ,EAAE;YACrB,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAC1C,CAAC,GAAG,EAAE,UAAU,EAAE,EAAE;gBAClB,IAAI,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBAC1C,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACd,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,MAAM,EAAE;wBACvD,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;qBACf;yBAAM,IAAI,UAAU,CAAC,MAAM,KAAK,SAAS,EAAE;wBAC1C,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;qBAChB;iBACF;gBACD,OAAO,GAAG,CAAC;YACb,CAAC,EACD,CAAC,KAAK,EAAE,SAAS,CAAC,CACnB,CAAC;YACF,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;YAC9B,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;SAC7B;QACD,IAAK,KAA4B,CAAC,MAAM,EAAE;YACxC,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YAC9B,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;YAC1B,WAAW,CAAC,eAAe,GAAG,KAAK,CAAC;SACrC;aAAM;YACL,QAAQ,KAAK,CAAC,IAAI,EAAE;gBAClB,OAAO,CAAC,CAAC;oBACP,WAAW,CAAC,IAAI,GAAG,IAAA,4BAAmB,EAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;oBAC1D,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;wBACrB,MAAM,IAAI,KAAK,CACb,2BAA2B,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,eAC9C,KAAK,CAAC,IACR,cAAc,SAAS,KAAK,IAAI,GAAG,CACpC,CAAC;qBACH;oBACD,WAAW,CAAC,eAAe,GAAG,KAAK,CAAC;oBACpC,MAAM;iBACP;gBACD,KAAK,MAAM,CAAC,CAAC;oBACX,IAAI,KAAK,CAAC,aAAa,KAAK,SAAS,EAAE;wBACrC,MAAM,IAAI,KAAK,CAAC,YAAY,KAAK,CAAC,IAAI,iDAAiD,CAAC,CAAC;qBAC1F;oBACD,WAAW,CAAC,IAAI,GAAG,IAAA,mBAAU,EAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;oBACxD,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC;iBACpC;aACF;SACF;QACD,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC7B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AA9DD,sCA8DC;AAED,KAAK,UAAU,cAAc,CAAC,IAAY,EAAE,QAAiB;IAC3D,IAAI;QACF,MAAM,IAAA,gBAAS,EAAC,gBAAM,CAAC,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,QAAQ,EAAE;YACZ,MAAM,YAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;SAClD;KACF;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;KAC9C;AACH,CAAC;AAED,6CAA6C;AACtC,KAAK,UAAU,OAAO,CAAC,WAAmB;IAC/C,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IACxD,MAAM,cAAc,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;IAC9E,MAAM,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACrC,MAAM,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC5C,MAAM,QAAQ,GAAG,IAAA,4BAAmB,EAAC,WAAW,CAAC,CAAC;IAClD,MAAM,sBAAsB,CAAC,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACnF,MAAM,cAAc,CAAC,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3E,MAAM,aAAa,CAAC,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1E,IAAI,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,KAAK,EAAE;QACrE,IAAI;YACF,MAAM,cAAc,CAAC,yBAAyB,EAAE,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,EAAE;gBACjG,KAAK,EAAE;oBACL,WAAW;iBACZ;aACF,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;QACD,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;KAC1C;AACH,CAAC;AArBD,0BAqBC;AAED,qCAAqC;AAC9B,KAAK,UAAU,cAAc,CAAC,WAAmB,EAAE,MAAc;IACtE,MAAM,eAAe,GAAG,IAAA,gCAAuB,EAAC,MAAM,CAAC,CAAC;IACxD,KAAK,MAAM,MAAM,IAAI,eAAe,CAAC,MAAM,EAAE;QAC3C,MAAM,cAAc,GAAG,aAAa,CAAC;QACrC,MAAM,SAAS,GAAG,IAAA,mBAAU,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;QAC/B,MAAM,MAAM,GAAG,aAAa,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACjF,MAAM,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAChG,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC9E,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QACxF,MAAM,aAAa,GAAG;YACpB,KAAK,EAAE;gBACL,cAAc;gBACd,SAAS;gBACT,UAAU;gBACV,MAAM;gBACN,oBAAoB;gBACpB,WAAW;gBACX,aAAa;aACd;YACD,MAAM,EAAE;gBACN,UAAU,EAAV,mBAAU;aACX;SACF,CAAC;QACF,IAAI;YACF,MAAM,cAAc,CAClB,mBAAmB,EACnB,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,GAAG,SAAS,KAAK,CAAC,EACzD,aAAa,CACd,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,sBAAsB,SAAS,6BAA6B,CAAC,CAAC;SAC/E;QACD,OAAO,CAAC,GAAG,CAAC,YAAY,SAAS,cAAc,CAAC,CAAC;KAClD;IACD,MAAM,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvE,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,IAAI;YACF,MAAM,cAAc,CAAC,0BAA0B,EAAE,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,UAAU,CAAC,EAAE;gBACnG,KAAK,EAAE;oBACL,UAAU;iBACX;gBACD,MAAM,EAAE;oBACN,UAAU,EAAV,mBAAU;iBACX;aACF,CAAC,CAAC;YACH,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;SAC3B;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;KAC3C;AACH,CAAC;AArDD,wCAqDC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {\n  getAllEntitiesRelations,\n  loadProjectManifest,\n  getAllJsonObjects,\n  setJsonObjectType,\n  getTypeByScalarName,\n  GraphQLEntityField,\n  GraphQLJsonFieldType,\n  GraphQLEntityIndex,\n  getAllEnums,\n} from '@subql/common';\nimport ejs from 'ejs';\nimport {upperFirst} from 'lodash';\nimport rimraf from 'rimraf';\n\nconst MODEL_TEMPLATE_PATH = path.resolve(__dirname, '../template/model.ts.ejs');\nconst MODELS_INDEX_TEMPLATE_PATH = path.resolve(__dirname, '../template/models-index.ts.ejs');\nconst TYPES_INDEX_TEMPLATE_PATH = path.resolve(__dirname, '../template/types-index.ts.ejs');\nconst INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../template/interface.ts.ejs');\nconst ENUM_TEMPLATE_PATH = path.resolve(__dirname, '../template/enum.ts.ejs');\nconst TYPE_ROOT_DIR = 'src/types';\nconst MODEL_ROOT_DIR = 'src/types/models';\nconst exportTypes = {\n  models: false,\n  interfaces: false,\n  enums: false,\n};\n\n// 4. Render entity data in ejs template and write it\nexport async function renderTemplate(templatePath: string, outputPath: string, templateData: ejs.Data): Promise<void> {\n  const data = await ejs.renderFile(templatePath, templateData);\n  await fs.promises.writeFile(outputPath, data);\n}\n\n// 3. Re-format the field of the entity\nexport interface ProcessedField {\n  name: string;\n  type: string;\n  required: boolean;\n  isEnum: boolean;\n  indexed: boolean;\n  unique?: boolean;\n  isArray: boolean;\n  isJsonInterface: boolean;\n}\n\nexport async function generateJsonInterfaces(projectPath: string, schema: string): Promise<void> {\n  const typesDir = path.join(projectPath, TYPE_ROOT_DIR);\n  const jsonObjects = getAllJsonObjects(schema);\n  const jsonInterfaces = jsonObjects.map((r) => {\n    const object = setJsonObjectType(r, jsonObjects);\n    const fields = processFields('jsonField', object.name, object.fields);\n    return {\n      interfaceName: object.name,\n      fields,\n    };\n  });\n\n  if (jsonInterfaces.length !== 0) {\n    const interfaceTemplate = {\n      props: {\n        jsonInterfaces,\n      },\n      helper: {\n        upperFirst,\n      },\n    };\n    try {\n      await renderTemplate(INTERFACE_TEMPLATE_PATH, path.join(typesDir, `interfaces.ts`), interfaceTemplate);\n      exportTypes.interfaces = true;\n    } catch (e) {\n      throw new Error(`When render json interfaces having problems.`);\n    }\n  }\n}\n\nexport async function generateEnums(projectPath: string, schema: string): Promise<void> {\n  const typesDir = path.join(projectPath, TYPE_ROOT_DIR);\n  const jsonObjects = getAllEnums(schema);\n  const enums = jsonObjects.map((r) => {\n    return {\n      name: r.name,\n      values: r.getValues().map((v) => v.name),\n    };\n  });\n\n  if (enums.length !== 0) {\n    const enumsTemplate = {\n      props: {\n        enums,\n      },\n    };\n    try {\n      await renderTemplate(ENUM_TEMPLATE_PATH, path.join(typesDir, `enums.ts`), enumsTemplate);\n      exportTypes.enums = true;\n    } catch (e) {\n      throw new Error(`When render enums having problems.`);\n    }\n  }\n}\n\nexport function processFields(\n  type: 'entity' | 'jsonField',\n  className: string,\n  fields: (GraphQLEntityField | GraphQLJsonFieldType)[],\n  indexFields: GraphQLEntityIndex[] = []\n): ProcessedField[] {\n  const fieldList: ProcessedField[] = [];\n  for (const field of fields) {\n    const injectField = {\n      name: field.name,\n      required: !field.nullable,\n      isArray: field.isArray,\n      isEnum: false,\n    } as ProcessedField;\n    if (type === 'entity') {\n      const [indexed, unique] = indexFields.reduce<[boolean, boolean]>(\n        (acc, indexField) => {\n          if (indexField.fields.includes(field.name)) {\n            acc[0] = true;\n            if (indexField.fields.length === 1 && indexField.unique) {\n              acc[1] = true;\n            } else if (indexField.unique === undefined) {\n              acc[1] = false;\n            }\n          }\n          return acc;\n        },\n        [false, undefined]\n      );\n      injectField.indexed = indexed;\n      injectField.unique = unique;\n    }\n    if ((field as GraphQLEntityField).isEnum) {\n      injectField.type = field.type;\n      injectField.isEnum = true;\n      injectField.isJsonInterface = false;\n    } else {\n      switch (field.type) {\n        default: {\n          injectField.type = getTypeByScalarName(field.type).tsType;\n          if (!injectField.type) {\n            throw new Error(\n              `Schema: undefined type \"${field.type.toString()}\" on field \"${\n                field.name\n              }\" in \"type ${className} @${type}\"`\n            );\n          }\n          injectField.isJsonInterface = false;\n          break;\n        }\n        case 'Json': {\n          if (field.jsonInterface === undefined) {\n            throw new Error(`On field ${field.name} type is Json but json interface is not defined`);\n          }\n          injectField.type = upperFirst(field.jsonInterface.name);\n          injectField.isJsonInterface = true;\n        }\n      }\n    }\n    fieldList.push(injectField);\n  }\n  return fieldList;\n}\n\nasync function prepareDirPath(path: string, recreate: boolean) {\n  try {\n    await promisify(rimraf)(path);\n    if (recreate) {\n      await fs.promises.mkdir(path, {recursive: true});\n    }\n  } catch (e) {\n    throw new Error(`Failed to prepare ${path}`);\n  }\n}\n\n//1. Prepare models directory and load schema\nexport async function codegen(projectPath: string): Promise<void> {\n  const modelDir = path.join(projectPath, MODEL_ROOT_DIR);\n  const interfacesPath = path.join(projectPath, TYPE_ROOT_DIR, `interfaces.ts`);\n  await prepareDirPath(modelDir, true);\n  await prepareDirPath(interfacesPath, false);\n  const manifest = loadProjectManifest(projectPath);\n  await generateJsonInterfaces(projectPath, path.join(projectPath, manifest.schema));\n  await generateModels(projectPath, path.join(projectPath, manifest.schema));\n  await generateEnums(projectPath, path.join(projectPath, manifest.schema));\n  if (exportTypes.interfaces || exportTypes.models || exportTypes.enums) {\n    try {\n      await renderTemplate(TYPES_INDEX_TEMPLATE_PATH, path.join(projectPath, TYPE_ROOT_DIR, `index.ts`), {\n        props: {\n          exportTypes,\n        },\n      });\n    } catch (e) {\n      throw new Error(`When render index in types having problems.`);\n    }\n    console.log(`* Types index generated !`);\n  }\n}\n\n// 2. Loop all entities and render it\nexport async function generateModels(projectPath: string, schema: string): Promise<void> {\n  const extractEntities = getAllEntitiesRelations(schema);\n  for (const entity of extractEntities.models) {\n    const baseFolderPath = '.../../base';\n    const className = upperFirst(entity.name);\n    const entityName = entity.name;\n    const fields = processFields('entity', className, entity.fields, entity.indexes);\n    const importJsonInterfaces = fields.filter((field) => field.isJsonInterface).map((f) => f.type);\n    const importEnums = fields.filter((field) => field.isEnum).map((f) => f.type);\n    const indexedFields = fields.filter((field) => field.indexed && !field.isJsonInterface);\n    const modelTemplate = {\n      props: {\n        baseFolderPath,\n        className,\n        entityName,\n        fields,\n        importJsonInterfaces,\n        importEnums,\n        indexedFields,\n      },\n      helper: {\n        upperFirst,\n      },\n    };\n    try {\n      await renderTemplate(\n        MODEL_TEMPLATE_PATH,\n        path.join(projectPath, MODEL_ROOT_DIR, `${className}.ts`),\n        modelTemplate\n      );\n    } catch (e) {\n      console.error(e);\n      throw new Error(`When render entity ${className} to schema having problems.`);\n    }\n    console.log(`* Schema ${className} generated !`);\n  }\n  const classNames = extractEntities.models.map((entity) => entity.name);\n  if (classNames.length !== 0) {\n    try {\n      await renderTemplate(MODELS_INDEX_TEMPLATE_PATH, path.join(projectPath, MODEL_ROOT_DIR, `index.ts`), {\n        props: {\n          classNames,\n        },\n        helper: {\n          upperFirst,\n        },\n      });\n      exportTypes.models = true;\n    } catch (e) {\n      throw new Error(`When render index in models having problems.`);\n    }\n    console.log(`* Models index generated !`);\n  }\n}\n"]}