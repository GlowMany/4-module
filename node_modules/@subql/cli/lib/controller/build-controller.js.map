{"version":3,"file":"build-controller.js","sourceRoot":"","sources":["../../src/controller/build-controller.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;AAEtC,6DAAwB;AACxB,mEAA8B;AAC9B,iDAAoC;AAEpC,MAAM,aAAa,GAAG,CAAC,SAAiB,EAAE,UAAkB,EAAE,WAAqB,EAAyB,EAAE,CAAC,CAAC;IAC9G,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY;IAChD,KAAK,EAAE,SAAS;IAChB,OAAO,EAAE,WAAW,IAAI,mBAAmB;IAC3C,MAAM,EAAE;QACN,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;gBACpC,OAAO,EAAE;oBACP,eAAe,EAAE;wBACf,WAAW,EAAE,KAAK;qBACnB;iBACF;aACF;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,GAAG,EAAE,aAAa;aACnB;SACF;KACF;IAED,OAAO,EAAE;QACP,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC;KAC5C;IAED,MAAM,EAAE;QACN,IAAI,EAAE,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC;QAC9B,QAAQ,EAAE,cAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACnC,aAAa,EAAE,UAAU;KAC1B;CACF,CAAC,CAAC;AAEI,KAAK,UAAU,UAAU,CAAC,SAAiB,EAAE,UAAkB,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,GAAG,KAAK;IAClG,MAAM,MAAM,GAAG,IAAA,qBAAK,EAClB,aAAa,CAAC,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,EAC3C,EAAC,MAAM,EAAE,EAAC,KAAK,EAAC,EAAC;IACjB,qDAAqD;KACtD,CAAC;IAEF,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACpC,IAAA,iBAAO,EAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACnC,IAAI,KAAK,EAAE;gBACT,MAAM,CAAC,KAAK,CAAC,CAAC;gBACd,OAAO;aACR;YAED,IAAI,KAAK,CAAC,SAAS,EAAE,EAAE;gBACrB,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBAE5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBACjC,OAAO;aACR;YAED,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAzBD,gCAyBC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport webpack from 'webpack';\nimport {merge} from 'webpack-merge';\n\nconst getBaseConfig = (entryPath: string, outputPath: string, development?: boolean): webpack.Configuration => ({\n  target: 'node',\n  mode: development ? 'development' : 'production',\n  entry: entryPath,\n  devtool: development && 'inline-source-map',\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        exclude: /node_modules/,\n        loader: require.resolve('ts-loader'),\n        options: {\n          compilerOptions: {\n            declaration: false,\n          },\n        },\n      },\n      {\n        test: /\\.ya?ml$/,\n        use: 'yaml-loader',\n      },\n    ],\n  },\n\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js', '.json'],\n  },\n\n  output: {\n    path: path.dirname(outputPath),\n    filename: path.basename(outputPath),\n    libraryTarget: 'commonjs',\n  },\n});\n\nexport async function runWebpack(entryPath: string, outputPath: string, isDev = false, clean = false): Promise<void> {\n  const config = merge(\n    getBaseConfig(entryPath, outputPath, isDev),\n    {output: {clean}}\n    // Can allow projects to override webpack config here\n  );\n\n  await new Promise((resolve, reject) => {\n    webpack(config).run((error, stats) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      if (stats.hasErrors()) {\n        const info = stats.toJson();\n\n        reject(info.errors[0]);\n        this.log(info.errors[0].details);\n        return;\n      }\n\n      resolve(true);\n    });\n  });\n}\n"]}