{"version":3,"file":"init-controller.test.js","sourceRoot":"","sources":["../../src/controller/init-controller.test.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,oDAAyB;AACzB,yDAAoB;AACpB,6DAAwB;AACxB,uDAAgD;AAEhD,QAAQ;AACR,MAAM,UAAU,GAAG,KAAK,EAAE,IAAY,EAAoB,EAAE;IAC1D,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;YACzC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,KAAK,UAAU,WAAW;IACxB,MAAM,GAAG,GAAG,cAAI,CAAC,GAAG,CAAC;IACrB,MAAM,MAAM,GAAG,YAAE,CAAC,MAAM,EAAE,CAAC;IAC3B,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC;IAC9D,OAAO,QAAQ,CAAC;AAClB,CAAC;AACD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,MAAM,WAAW,GAAG;IAClB,IAAI,EAAE,gBAAgB;IACtB,UAAU,EAAE,EAAE;IACd,QAAQ,EAAE,iCAAiC;IAC3C,MAAM,EAAE,KAAK;IACb,WAAW,EAAE,kCAAkC;IAC/C,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,EAAE;CACZ,CAAC;AAEF,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,QAAQ,GAAG,MAAM,WAAW,EAAE,CAAC;QACrC,MAAM,IAAA,+BAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC3C,MAAM,MAAM,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,QAAQ,GAAG,MAAM,WAAW,EAAE,CAAC;QACrC,MAAM,IAAA,+BAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC3C,MAAM,MAAM,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,WAAW,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC9F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {createProject} from './init-controller';\n\n// async\nconst fileExists = async (file: string): Promise<boolean> => {\n  return new Promise<boolean>((resolve, reject) => {\n    fs.access(file, fs.constants.F_OK, (err) => {\n      err ? reject(err) : resolve(true);\n    });\n  });\n};\n\nasync function makeTempDir() {\n  const sep = path.sep;\n  const tmpDir = os.tmpdir();\n  const tempPath = await fs.promises.mkdtemp(`${tmpDir}${sep}`);\n  return tempPath;\n}\njest.setTimeout(30000);\n\nconst projectSpec = {\n  name: 'mocked_starter',\n  repository: '',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n};\n\ndescribe('Cli can create project', () => {\n  it('should resolves when starter project successful created', async () => {\n    const tempPath = await makeTempDir();\n    await createProject(tempPath, projectSpec);\n    await expect(fileExists(path.join(tempPath, `${projectSpec.name}`))).resolves.toEqual(true);\n  });\n\n  it('throw error if .git exists in starter project', async () => {\n    const tempPath = await makeTempDir();\n    await createProject(tempPath, projectSpec);\n    await expect(fileExists(path.join(tempPath, `${projectSpec.name}/.git`))).rejects.toThrow();\n  });\n});\n"]}