{"version":3,"file":"codegen-controller.spec.js","sourceRoot":"","sources":["../../src/controller/codegen-controller.spec.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,yDAAoB;AACpB,6DAAwB;AACxB,iEAA4B;AAC5B,6DAA6C;AAE7C,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;IACnB,8DAA8D;IAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAQ,CAAC;IACtD,MAAM,CAAC,QAAQ,GAAG;QAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;IACvB,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAY,CAAC;AACxD,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;IACpD,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAC7D,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC7E,gBAA+B,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACvE,YAAE,CAAC,QAAQ,CAAC,KAAmB,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7F,MAAM,MAAM,CAAC,IAAA,4BAAO,EAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport {codegen} from './codegen-controller';\n\njest.mock('fs', () => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const fsMock = jest.createMockFromModule('fs') as any;\n  fsMock.promises = {\n    mkdir: jest.fn(),\n  };\n  return fsMock;\n});\n\njest.mock('rimraf', () => {\n  return jest.createMockFromModule('rimraf') as unknown;\n});\n\njest.setTimeout(30000);\n\ndescribe('Codegen can generate schema (mocked)', () => {\n  const projectPath = path.join(__dirname, '../../test/test1');\n  it('throw error when make directory failed at beginning of codegen', async () => {\n    (rimraf as unknown as jest.Mock).mockImplementation((path, cb) => cb());\n    (fs.promises.mkdir as jest.Mock).mockImplementation(async () => Promise.reject(new Error()));\n    await expect(codegen(projectPath)).rejects.toThrow(/Failed to prepare/);\n  });\n});\n"]}