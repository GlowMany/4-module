{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../src/commands/validate.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,4CAA8C;AAC9C,gDAAwD;AACxD,+DAA0B;AAE1B,MAAqB,QAAS,SAAQ,iBAAO;IAY3C,KAAK,CAAC,GAAG;;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,IAAI,qBAAS,CAAC,MAAA,KAAK,CAAC,QAAQ,mCAAI,OAAO,CAAC,GAAG,EAAE,EAAE,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,OAAO,CAAC,GAAG,uBAAW,CAAC,CAAC;QAE1B,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;QACrD,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QACxD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;QAEjD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACjB,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;gBACvB,IAAI,CAAC,CAAC,KAAK,EAAE;oBACX,IAAI,CAAC,GAAG,CAAC,GAAG,eAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;iBACvD;qBAAM,IAAI,CAAC,CAAC,OAAO,EAAE;oBACpB,IAAI,CAAC,GAAG,CAAC,GAAG,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;iBACtD;qBAAM;oBACL,IAAI,CAAC,GAAG,CAAC,GAAG,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;oBACpD,IAAI,CAAC,GAAG,CAAC,UAAU,eAAK,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;iBACtD;aACF;YAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACb,IAAI,CAAC,GAAG,CAAC,WAAW,MAAM,YAAY,MAAM,YAAY,OAAO,UAAU,CAAC,CAAC;YAC3E,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACd;QAED,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACd;IACH,CAAC;;AA1CH,2BA2CC;AA1CQ,oBAAW,GAAG,8DAA8D,CAAC;AAE7E,cAAK,GAAG;IACb,QAAQ,EAAE,eAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,2CAA2C,EAAC,CAAC;IAC7F,IAAI,EAAE,eAAK,CAAC,MAAM,CAAC;QACjB,WAAW,EAAE,6DAA6D;QAC1E,OAAO,EAAE,qCAAqC;KAC/C,CAAC;IACF,MAAM,EAAE,eAAK,CAAC,OAAO,EAAE;CACxB,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Command, flags} from '@oclif/command';\nimport {commonRules, Validator} from '@subql/validator';\nimport chalk from 'chalk';\n\nexport default class Validate extends Command {\n  static description = 'Check a folder or github repo is a validate subquery project';\n\n  static flags = {\n    location: flags.string({char: 'l', description: 'local folder, github repo url or IPFS cid'}),\n    ipfs: flags.string({\n      description: 'IPFS gateway endpoint, used for validating projects on IPFS',\n      default: 'https://ipfs.thechainhub.com/api/v0',\n    }),\n    silent: flags.boolean(),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = this.parse(Validate);\n    const v = new Validator(flags.location ?? process.cwd(), {ipfs: flags.ipfs});\n    v.addRule(...commonRules);\n\n    const reports = await v.getValidateReports();\n    const passed = reports.filter((r) => r.valid).length;\n    const skipped = reports.filter((r) => r.skipped).length;\n    const failed = reports.length - passed - skipped;\n\n    if (!flags.silent) {\n      for (const r of reports) {\n        if (r.valid) {\n          this.log(`${chalk.bgGreen.bold(' PASS ')} ${r.name}`);\n        } else if (r.skipped) {\n          this.log(`${chalk.yellow.bold(' SKIP ')} ${r.name}`);\n        } else {\n          this.log(`${chalk.bgRed.bold(' FAIL ')} ${r.name}`);\n          this.log(`       ${chalk.redBright(r.description)}`);\n        }\n      }\n\n      this.log('');\n      this.log(`Result: ${passed} passed, ${failed} failed, ${skipped} skipped`);\n      this.log('');\n    }\n\n    if (failed > 0) {\n      this.exit(1);\n    }\n  }\n}\n"]}