{"version":3,"file":"build.js","sourceRoot":"","sources":["../../src/commands/build.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,2BAA2C;AAC3C,6DAAwB;AACxB,4CAA8C;AAC9C,iEAAyB;AACzB,qEAA0D;AAC1D,uEAAkC;AAElC,MAAqB,KAAM,SAAQ,iBAAO;IAQxC,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAElC,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QAChF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,KAAK,aAAa,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC;QAEnE,IAAI,CAAC,IAAA,cAAS,EAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;SAC5D;QAED,sCAAsC;QACtC,IAAI;YACF,MAAM,kBAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;SAC3D;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;SAChD;QAED,mEAAmE;QACnE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxF,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,IAAI,eAAe,CAAC,CAAC;QAE1E,gBAAG,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC9C,MAAM,IAAA,6BAAU,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAChF,gBAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;;AAhCH,wBAiCC;AAhCQ,iBAAW,GAAG,kCAAkC,CAAC;AAEjD,WAAK,GAAG;IACb,QAAQ,EAAE,eAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,EAAC,CAAC;IAChE,IAAI,EAAE,eAAK,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,YAAY,EAAC,CAAC;CACjG,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {lstatSync, readFileSync} from 'fs';\nimport path from 'path';\nimport {Command, flags} from '@oclif/command';\nimport cli from 'cli-ux';\nimport {runWebpack} from '../controller/build-controller';\nimport Validate from './validate';\n\nexport default class Build extends Command {\n  static description = 'Build this SubQuery project code';\n\n  static flags = {\n    location: flags.string({char: 'l', description: 'local folder'}),\n    mode: flags.enum({options: ['production', 'prod', 'development', 'dev'], default: 'production'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = this.parse(Build);\n\n    const directory = flags.location ? path.resolve(flags.location) : process.cwd();\n    const isDev = flags.mode === 'development' || flags.mode === 'dev';\n\n    if (!lstatSync(directory).isDirectory()) {\n      this.error('Argument `location` is not a valid directory');\n    }\n\n    // Check that we're in a valid project\n    try {\n      await Validate.run(['--silent', '--location', directory]);\n    } catch (e) {\n      this.error('Directory is not a valid project');\n    }\n\n    // Get the output location from the project package.json main field\n    const pjson = JSON.parse(readFileSync(path.join(directory, 'package.json')).toString());\n    const outputPath = path.resolve(directory, pjson.main || 'dist/index.js');\n\n    cli.action.start('Building and packing code');\n    await runWebpack(path.join(directory, 'src/index.ts'), outputPath, isDev, true);\n    cli.action.stop();\n  }\n}\n"]}