{"version":3,"file":"migrate.js","sourceRoot":"","sources":["../../src/commands/migrate.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,6DAAwB;AACxB,4CAA8C;AAC9C,0CAA4E;AAC5E,yEAAkE;AAElE,MAAqB,OAAQ,SAAQ,iBAAO;IAS1C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QAC/E,IAAI,QAAkC,CAAC;QACvC,IAAI;YACF,QAAQ,GAAG,IAAA,4BAAmB,EAAC,QAAQ,CAAC,CAAC;SAC1C;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,uDAAuD,CAAC,EAAE,CAAC,CAAC;SACxE;QACD,IAAI,QAAQ,CAAC,QAAQ,EAAE;YACrB,IAAI,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;SAC1D;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;YACvE,MAAM,CAAC,OAAO,EAAE,sBAAsB,CAAC,GAAG,MAAM,IAAA,4BAAO,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC5E,MAAM,IAAA,4BAAO,EAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACnE,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YAClC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;IACH,CAAC;;AA3BH,0BA4BC;AA3BQ,mBAAW,GAAG,oDAAoD,CAAC;AAEnE,aAAK,GAAG;IACb,KAAK,EAAE,eAAK,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC;IACjC,IAAI,EAAE,eAAK,CAAC,MAAM,EAAE;IACpB,QAAQ,EAAE,eAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,gCAAgC,EAAC,CAAC;CACnF,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {Command, flags} from '@oclif/command';\nimport {loadProjectManifest, ProjectManifestVersioned} from '@subql/common';\nimport {migrate, prepare} from '../controller/migrate-controller';\n\nexport default class Migrate extends Command {\n  static description = 'Migrate Subquery project manifest v0.0.1 to v0.2.0';\n\n  static flags = {\n    force: flags.boolean({char: 'f'}),\n    file: flags.string(),\n    location: flags.string({char: 'l', description: 'local folder to run migrate in'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = this.parse(Migrate);\n    const location = flags.location ? path.resolve(flags.location) : process.cwd();\n    let manifest: ProjectManifestVersioned;\n    try {\n      manifest = loadProjectManifest(location);\n    } catch (e) {\n      this.error(`Please validate project manifest before migrate. \\n ${e}`);\n    }\n    if (manifest.isV0_2_0) {\n      this.log(`* You are already using manifest spec v0.2.0`);\n    } else {\n      console.log(`* Converting manifest v0.0.1 to v0.2.0, please provide:`);\n      const [project, chainTypesRelativePath] = await prepare(location, manifest);\n      await migrate(location, project, manifest, chainTypesRelativePath);\n      this.log('* Migration completed');\n      process.exit(0);\n    }\n  }\n}\n"]}