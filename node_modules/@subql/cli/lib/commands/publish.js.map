{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../src/commands/publish.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,2BAA6B;AAC7B,6DAAwB;AACxB,4CAA8C;AAC9C,yEAA8D;AAC9D,iEAA4B;AAE5B,MAAqB,OAAQ,SAAQ,iBAAO;IAQ1C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpC,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QAEhF,IAAI,CAAC,IAAA,cAAS,EAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;SAC5D;QAED,mCAAmC;QACnC,IAAI;YACF,MAAM,eAAK,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;SAC5C;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;SACvC;QAED,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,MAAM,IAAA,iCAAY,EAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAEtD,IAAI,CAAC,GAAG,CAAC,sCAAsC,GAAG,EAAE,CAAC,CAAC;IACxD,CAAC;;AA7BH,0BA8BC;AA7BQ,mBAAW,GAAG,sCAAsC,CAAC;AAErD,aAAK,GAAG;IACb,QAAQ,EAAE,eAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,EAAC,CAAC;IAChE,IAAI,EAAE,eAAK,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,uBAAuB,EAAE,OAAO,EAAE,8BAA8B,EAAC,CAAC;CACpG,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {lstatSync} from 'fs';\nimport path from 'path';\nimport {Command, flags} from '@oclif/command';\nimport {uploadToIpfs} from '../controller/publish-controller';\nimport Build from './build';\n\nexport default class Publish extends Command {\n  static description = 'Upload this SubQuery project to IPFS';\n\n  static flags = {\n    location: flags.string({char: 'l', description: 'local folder'}),\n    ipfs: flags.string({description: 'IPFS gateway endpoint', default: 'http://localhost:5001/api/v0'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = this.parse(Publish);\n\n    const directory = flags.location ? path.resolve(flags.location) : process.cwd();\n\n    if (!lstatSync(directory).isDirectory()) {\n      this.error('Argument `location` is not a valid directory');\n    }\n\n    // Ensure that the project is built\n    try {\n      await Build.run(['--location', directory]);\n    } catch (e) {\n      this.log(e);\n      this.error('Failed to build project');\n    }\n\n    this.log('Uploading SupQuery project to IPFS');\n    const cid = await uploadToIpfs(flags.ipfs, directory);\n\n    this.log(`SubQuery Project uploaded to IPFS: ${cid}`);\n  }\n}\n"]}