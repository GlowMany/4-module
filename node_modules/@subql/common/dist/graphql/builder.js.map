{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/graphql/builder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nexport interface GqlVar {\n  name: string;\n  gqlType: string;\n  value: unknown;\n}\n\nexport interface GqlNode {\n  // type?: \"interface\" | \"union\";\n  entity: string;\n  project?: Array<GqlNode | string>;\n  args?: Record<string, unknown>;\n}\n\nexport interface GqlQuery {\n  query: string;\n  variables: Record<string, unknown>;\n}\n\nfunction buildArgs(args: Record<string, unknown>): string {\n  return Object.keys(args)\n    .map((argKey) => {\n      const argValue = args[argKey];\n      if (typeof argValue === 'string') {\n        return `${argKey}:${argValue}`;\n      } else if (argValue instanceof Array) {\n        return `${argKey}:[${argValue\n          .map((nested) => {\n            if (typeof nested === 'string') {\n              return nested;\n            } else if (nested instanceof Array) {\n              throw new Error('not supported');\n            } else if (typeof nested === 'object') {\n              return `{${buildArgs(nested)}}`;\n            }\n            throw new Error('not supported');\n          })\n          .join(',')}]`;\n      } else if (typeof argValue === 'object') {\n        return `${argKey}:{${buildArgs(argValue as Record<string, unknown>)}}`;\n      } else {\n        throw new Error('graphql args not supported');\n      }\n    })\n    .join(',');\n}\n\nconst bindProjections = (node: GqlNode): string => {\n  return `${node.entity} ${node.args ? `(${buildArgs(node.args)})` : ``}${\n    node.project\n      ? `{${node.project\n          .map((el: GqlNode | string) => {\n            if (typeof el === 'string') {\n              return `${el} `;\n            }\n            return `${bindProjections(el)} `;\n          })\n          .join('')}} `\n      : ``\n  }`;\n};\n\nconst toVarDefs = (vars: GqlVar[]): string => {\n  return vars && vars.length ? `(${vars.map((item) => `$${item.name}:${item.gqlType}`)})` : ``;\n};\n\nconst toVariables = (vars: GqlVar[]) =>\n  vars.reduce((acc, v) => {\n    if (acc[v.name]) {\n      throw new Error(`Graphql variables conflicts $${v.name}`);\n    }\n    acc[v.name] = v.value;\n    return acc;\n  }, {} as Record<string, unknown>);\n\nexport function buildQuery(vars: GqlVar[], nodes: GqlNode[]): GqlQuery {\n  return {\n    query: `query${toVarDefs(vars)}{${nodes.map((node) => bindProjections(node)).join(' ')}}`,\n    variables: toVariables(vars),\n  };\n}\n"]}