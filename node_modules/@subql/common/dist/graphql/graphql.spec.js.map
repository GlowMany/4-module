{"version":3,"file":"graphql.spec.js","sourceRoot":"","sources":["../../src/graphql/graphql.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport gql from 'graphql-tag';\nimport {getAllEntitiesRelations} from './entities';\nimport {buildSchemaFromDocumentNode} from './schema';\n\ndescribe('utils that handle schema.graphql', () => {\n  it('support @entity annotation in the schema', () => {\n    const graphqlSchema = gql`\n      type KittyBirthInfo @entity {\n        id: ID!\n        birthBlockHeight: BigInt!\n        owner: String!\n        birthAt: Date!\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    expect(schema).toBeTruthy();\n    expect(Object.keys(schema.getTypeMap())).toContain('KittyBirthInfo');\n  });\n  it('can extract entities from the schema', () => {\n    const graphqlSchema = gql`\n      type KittyBirthInfo @entity {\n        id: ID!\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    const entities = getAllEntitiesRelations(schema);\n    expect(entities.models).toMatchObject([{name: 'KittyBirthInfo'}]);\n    expect(entities.models[0].fields).toEqual([\n      {isArray: false, name: 'id', nullable: false, type: 'ID', isEnum: false},\n    ]);\n  });\n\n  it('throw error for unsupported types', () => {\n    const graphqlSchema = gql`\n      type Test @entity {\n        id: ID!\n        price: Double\n      }\n    `;\n    expect(() => buildSchemaFromDocumentNode(graphqlSchema)).toThrow();\n  });\n\n  it('support Bytes and Float types', () => {\n    const graphqlSchema = gql`\n      type Test @entity {\n        id: ID!\n        hash: Bytes\n        rate: Float\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    const entities = getAllEntitiesRelations(schema);\n    expect(entities.models[0].fields[1].type).toBe('Bytes');\n    expect(entities.models[0].fields[2].type).toBe('Float');\n  });\n\n  it('throw error for union/enum/interface type', () => {\n    const graphqlSchema = gql`\n      type Test @entity {\n        id: ID!\n        unionKind: unionResult\n        enumKind: enumResult\n        who: Character\n      }\n      interface Character {\n        id: ID!\n        name: String!\n      }\n      union unionResult = Human | Droid | Starship\n      type Human @entity {\n        id: ID!\n      }\n      type Droid @entity {\n        id: ID!\n      }\n      type Starship @entity {\n        id: ID!\n      }\n      enum enumResult {\n        NEWHOPE\n        EMPIRE\n        JEDI\n      }\n    `;\n    expect(() => {\n      const schema = buildSchemaFromDocumentNode(graphqlSchema);\n      getAllEntitiesRelations(schema);\n    }).toThrow(/Not support/);\n  });\n\n  it('can extract nested models and relations from the schema', () => {\n    const graphqlSchema = gql`\n      type Account @entity {\n        id: ID!\n        identity: Identity! @derivedFrom(field: \"account\")\n        transfers: [Transfer] @derivedFrom(field: \"from\")\n      }\n      type Transfer @entity {\n        id: ID!\n        from: Account!\n      }\n      type Identity @entity {\n        id: ID!\n        account: Account!\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    const entities = getAllEntitiesRelations(schema);\n    expect(entities.models).toMatchObject([\n      {\n        name: 'Account',\n        fields: [{name: 'id', type: 'ID', isArray: false, nullable: false}],\n      },\n      {\n        name: 'Transfer',\n        fields: [\n          {name: 'id', type: 'ID', isArray: false, nullable: false},\n          {name: 'fromId', type: 'String', isArray: false, nullable: false},\n        ],\n      },\n      {\n        name: 'Identity',\n        fields: [\n          {name: 'id', type: 'ID', isArray: false, nullable: false},\n          {\n            name: 'accountId',\n            type: 'String',\n            isArray: false,\n            nullable: false,\n          },\n        ],\n      },\n    ]);\n\n    expect(entities.relations).toMatchObject([\n      {\n        from: 'Account',\n        type: 'hasOne',\n        to: 'Identity',\n        foreignKey: 'accountId',\n        fieldName: 'identity',\n      },\n      {\n        from: 'Account',\n        type: 'hasMany',\n        to: 'Transfer',\n        foreignKey: 'fromId',\n        fieldName: 'transfers',\n      },\n      {\n        from: 'Transfer',\n        type: 'belongsTo',\n        to: 'Account',\n        foreignKey: 'fromId',\n      },\n      {\n        from: 'Identity',\n        type: 'belongsTo',\n        to: 'Account',\n        foreignKey: 'accountId',\n      },\n    ]);\n  });\n\n  it('throw error if derivedFrom field with missing field name in corresponding entity', () => {\n    const graphqlSchema = gql`\n      type Account @entity {\n        id: ID!\n        transfers: [Transfer] @derivedFrom(field: \"from\")\n      }\n      type Transfer @entity {\n        id: ID!\n        #from: Account! # If this is missing\n        to: Account!\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    expect(() => getAllEntitiesRelations(schema)).toThrow(\n      'Please check entity Account with field transfers has correct relation with entity Transfer'\n    );\n  });\n\n  it('can extract indexed fields from the schema', () => {\n    const graphqlSchema = gql`\n      type TestEntity @entity {\n        id: ID!\n        column1: String @index\n        column2: BigInt @index(unique: true)\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    const entities = getAllEntitiesRelations(schema);\n    expect(entities.models?.[0].indexes).toHaveLength(2);\n    expect(entities.models?.[0].indexes[0].fields).toEqual(['column1']);\n    expect(entities.models?.[0].indexes[0].unique).toBeUndefined();\n    expect(entities.models?.[0].indexes[1].fields).toEqual(['column2']);\n    expect(entities.models?.[0].indexes[1].unique).toBe(true);\n  });\n\n  it('throw if add index on pk', () => {\n    const graphqlSchema = gql`\n      type TestEntity @entity {\n        id: ID! @index\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    expect(() => getAllEntitiesRelations(schema)).toThrow(/^index can not be added on field id/);\n  });\n\n  it('can extract indexed fields from foreign field', () => {\n    const graphqlSchema = gql`\n      type Fruit @entity {\n        id: ID!\n        apple: Apple\n        banana: [Banana] @index(unique: true)\n      }\n      type Fruit2 @entity {\n        id: ID!\n        apple: Apple @index\n      }\n      type Apple @entity {\n        id: ID!\n      }\n      type Banana @entity {\n        id: ID!\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    const entities = getAllEntitiesRelations(schema);\n    expect(entities.models?.[0].indexes[0].fields).toEqual(['appleId']);\n    expect(entities.models?.[0].indexes[0].using).toEqual('hash');\n    expect(entities.models?.[0].indexes[0].unique).toBe(false);\n    expect(entities.models?.[0].indexes[1].unique).toBe(true);\n    expect(entities.models?.[1].indexes[0].fields).toEqual(['appleId']);\n    expect(entities.models?.[1].indexes[0].unique).toBe(false);\n  });\n\n  it('can read jsonfield', () => {\n    const graphqlSchema = gql`\n      type MyJson @jsonField {\n        data: String!\n        data2: [String]\n        data3: MyJson2\n      }\n      type MyJson2 @jsonField {\n        data4: String!\n      }\n      type Account @entity {\n        field6: [MyJson]!\n      }\n    `;\n    const schema = buildSchemaFromDocumentNode(graphqlSchema);\n    const accountModel = getAllEntitiesRelations(schema).models.find((model) => model.name === 'Account');\n    expect(accountModel.fields[0].type).toBe('Json');\n    expect(accountModel.fields[0].jsonInterface.name).toBe('MyJson');\n    expect(accountModel.fields[0].isArray).toBeTruthy();\n    expect(accountModel.fields[0].jsonInterface.fields[0].nullable).toBeFalsy();\n    expect(accountModel.fields[0].jsonInterface.fields[1].isArray).toBeTruthy();\n    // allow json in json\n    expect(accountModel.fields[0].jsonInterface.fields[2].type).toBe('Json');\n    expect(accountModel.fields[0].jsonInterface.fields[2].jsonInterface.name).toBe('MyJson2');\n  });\n});\n"]}