{"version":3,"file":"builder.spec.js","sourceRoot":"","sources":["../../src/graphql/builder.spec.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;AAGtC,uCAAsD;AAEtD,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QACf,MAAM,IAAI,GAAa;YACrB;gBACE,IAAI,EAAE,WAAW;gBACjB,OAAO,EAAE,SAAS;gBAClB,KAAK,EAAE,UAAU;aAClB;SACF,CAAC;QACF,MAAM,KAAK,GAAc;YACvB;gBACE,MAAM,EAAE,cAAc;gBACtB,IAAI,EAAE;oBACJ,MAAM,EAAE;wBACN,WAAW,EAAE,EAAC,oBAAoB,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAC;qBACpE;iBACF;gBACD,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,OAAO;wBACf,OAAO,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC;qBAC/B;iBACF;aACF;YACD;gBACE,MAAM,EAAE,QAAQ;gBAChB,IAAI,EAAE;oBACJ,MAAM,EAAE;wBACN,WAAW,EAAE,EAAC,oBAAoB,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAC;wBACnE,EAAE,EAAE;4BACF;gCACE,GAAG,EAAE,CAAC,EAAC,MAAM,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,EAAC,EAAE,EAAC,KAAK,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,EAAC,CAAC;6BAC3E;yBACF;qBACF;oBACD,OAAO,EAAE,kBAAkB;oBAC3B,KAAK,EAAE,KAAK;iBACb;gBACD,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,OAAO;wBACf,OAAO,EAAE,CAAC,aAAa,CAAC;qBACzB;iBACF;aACF;SACF,CAAC;QACF,MAAM,EAAC,KAAK,EAAE,SAAS,EAAC,GAAG,IAAA,oBAAU,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {validate} from 'graphql/validation';\nimport {buildQuery, GqlNode, GqlVar} from './builder';\n\ndescribe('build gql', () => {\n  it('gql 1', () => {\n    const vars: GqlVar[] = [\n      {\n        name: 'e_1_value',\n        gqlType: 'String!',\n        value: 'balances',\n      },\n    ];\n    const nodes: GqlNode[] = [\n      {\n        entity: 'specVersions',\n        args: {\n          filter: {\n            blockHeight: {greaterThanOrEqualTo: '\"1000\"', lessThan: '\"100000\"'},\n          },\n        },\n        project: [\n          {\n            entity: 'nodes',\n            project: ['id', 'blockHeight'],\n          },\n        ],\n      },\n      {\n        entity: 'events',\n        args: {\n          filter: {\n            blockHeight: {greaterThanOrEqualTo: '\"1000\"', lessThan: '\"100000\"'},\n            or: [\n              {\n                and: [{module: {equalTo: '$e_1_value'}}, {event: {equalTo: '\"Transfer\"'}}],\n              },\n            ],\n          },\n          orderBy: 'BLOCK_HEIGHT_ASC',\n          first: '100',\n        },\n        project: [\n          {\n            entity: 'nodes',\n            project: ['blockHeight'],\n          },\n        ],\n      },\n    ];\n    const {query, variables} = buildQuery(vars, nodes);\n    expect(variables.e_1_value).toBe('balances');\n    expect(query).toMatch(/query\\(\\$e_1_value:String!\\)/);\n  });\n});\n"]}