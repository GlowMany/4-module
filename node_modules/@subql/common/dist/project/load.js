"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseChainTypes = exports.loadProjectManifest = exports.loadChainTypes = exports.loadFromJsonOrYaml = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const x_vm2_1 = require("@subql/x-vm2");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const js_yaml_1 = __importDefault(require("js-yaml"));
const models_1 = require("./models");
const versioned_1 = require("./versioned");
function loadFromJsonOrYaml(file) {
    const { ext } = path_1.default.parse(file);
    if (ext !== '.yaml' && ext !== '.yml' && ext !== '.json') {
        throw new Error(`Extension ${ext} not supported`);
    }
    const rawContent = fs_1.default.readFileSync(file, 'utf-8');
    return js_yaml_1.default.load(rawContent);
}
exports.loadFromJsonOrYaml = loadFromJsonOrYaml;
function loadChainTypes(file, projectRoot) {
    const { ext } = path_1.default.parse(file);
    if (ext === '.js' || ext === '.cjs') {
        return loadChainTypesFromJs(file, projectRoot);
    }
    else {
        return loadFromJsonOrYaml(file);
    }
}
exports.loadChainTypes = loadChainTypes;
function loadProjectManifest(file) {
    let manifestPath = file;
    if (fs_1.default.existsSync(file) && fs_1.default.lstatSync(file).isDirectory()) {
        const yamlFilePath = path_1.default.join(file, 'project.yaml');
        const jsonFilePath = path_1.default.join(file, 'project.json');
        if (fs_1.default.existsSync(yamlFilePath)) {
            manifestPath = yamlFilePath;
        }
        else if (fs_1.default.existsSync(jsonFilePath)) {
            manifestPath = jsonFilePath;
        }
        else {
            throw new Error(`Could not find project manifest under dir ${file}`);
        }
    }
    const doc = loadFromJsonOrYaml(manifestPath);
    const projectManifest = new versioned_1.ProjectManifestVersioned(doc);
    projectManifest.validate();
    return projectManifest;
}
exports.loadProjectManifest = loadProjectManifest;
function parseChainTypes(raw) {
    const chainTypes = (0, class_transformer_1.plainToClass)(models_1.ChainTypes, raw);
    const errors = (0, class_validator_1.validateSync)(chainTypes, { whitelist: true, forbidNonWhitelisted: true });
    if (errors === null || errors === void 0 ? void 0 : errors.length) {
        // TODO: print error details
        const errorMsgs = errors.map((e) => e.toString()).join('\n');
        throw new Error(`failed to parse chain types.\n${errorMsgs}`);
    }
    return chainTypes;
}
exports.parseChainTypes = parseChainTypes;
function loadChainTypesFromJs(filePath, requireRoot) {
    const { base, ext } = path_1.default.parse(filePath);
    const root = requireRoot !== null && requireRoot !== void 0 ? requireRoot : path_1.default.dirname(filePath);
    if (ext === '.js' || ext === '.cjs') {
        const vm = new x_vm2_1.NodeVM({
            console: 'redirect',
            wasm: false,
            sandbox: {},
            require: {
                context: 'sandbox',
                external: true,
                builtin: ['path'],
                root: root,
                resolve: (moduleName) => {
                    return require.resolve(moduleName, { paths: [root] });
                },
            },
            wrapper: 'commonjs',
            sourceExtensions: ['js', 'cjs'],
        });
        let rawContent;
        try {
            const script = new x_vm2_1.VMScript(`module.exports = require('${filePath}').default;`, path_1.default.join(root, 'sandbox')).compile();
            rawContent = vm.run(script);
        }
        catch (err) {
            throw new Error(`\n NodeVM error: ${err}`);
        }
        if (rawContent === undefined) {
            throw new Error(`There was no default export found from required ${base} file`);
        }
        return rawContent;
    }
    else {
        throw new Error(`Extension ${ext} not supported`);
    }
}
//# sourceMappingURL=load.js.map