"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const load_1 = require("./load");
const projectsDir = path_1.default.join(__dirname, '../../test');
describe('project.yaml', () => {
    it('can parse project.yaml to ProjectManifestImpl', () => {
        expect((0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project.yaml'))).toBeTruthy();
    });
    it('can validate project.yaml', () => {
        expect(() => (0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project_falsy.yaml'))).toThrow();
        expect(() => (0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project_falsy_array.yaml'))).toThrow();
    });
    it('can validate a v0.2.0 project.yaml', () => {
        expect(() => (0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.0.yaml'))).not.toThrow();
    });
    it('can fail validation if version not supported', () => {
        expect(() => (0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project_invalid_version.yaml'))).toThrow();
    });
    it('can validate a v0.2.0 project.yaml with a custom data source', () => {
        expect(() => (0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.0_custom_ds.yaml'))).not.toThrow();
    });
    it('can fail validation if custom ds missing processor', () => {
        expect(() => (0, load_1.loadProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.0_invalid_custom_ds.yaml'))).toThrow();
    });
});
//# sourceMappingURL=project.spec.js.map