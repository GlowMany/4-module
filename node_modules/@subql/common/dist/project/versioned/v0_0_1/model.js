"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectManifestV0_0_1Impl = exports.RuntimeDataSourceV0_0_1Impl = exports.ProjectNetworkV0_0_1 = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const models_1 = require("../../models");
const base_1 = require("../base");
class ProjectNetworkV0_0_1 extends models_1.ChainTypes {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectNetworkV0_0_1.prototype, "endpoint", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], ProjectNetworkV0_0_1.prototype, "dictionary", void 0);
exports.ProjectNetworkV0_0_1 = ProjectNetworkV0_0_1;
class RuntimeDataSourceV0_0_1Impl extends models_1.RuntimeDataSourceBase {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], RuntimeDataSourceV0_0_1Impl.prototype, "name", void 0);
exports.RuntimeDataSourceV0_0_1Impl = RuntimeDataSourceV0_0_1Impl;
class ProjectManifestV0_0_1Impl extends base_1.ProjectManifestBaseImpl {
    toDeployment() {
        throw new Error('Manifest spec 0.0.1 is not support for deployment, please migrate to 0.2.0 or above');
    }
    validate() {
        const errors = (0, class_validator_1.validateSync)(this, { whitelist: true, forbidNonWhitelisted: true });
        if (errors === null || errors === void 0 ? void 0 : errors.length) {
            // TODO: print error details
            const errorMsgs = errors.map((e) => e.toString()).join('\n');
            throw new Error(`failed to parse project.yaml.\n${errorMsgs}`);
        }
    }
}
__decorate([
    (0, class_validator_1.Equals)('0.0.1'),
    __metadata("design:type", String)
], ProjectManifestV0_0_1Impl.prototype, "specVersion", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => ProjectNetworkV0_0_1),
    (0, class_validator_1.IsObject)(),
    __metadata("design:type", ProjectNetworkV0_0_1)
], ProjectManifestV0_0_1Impl.prototype, "network", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestV0_0_1Impl.prototype, "schema", void 0);
__decorate([
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => RuntimeDataSourceV0_0_1Impl),
    __metadata("design:type", Array)
], ProjectManifestV0_0_1Impl.prototype, "dataSources", void 0);
exports.ProjectManifestV0_0_1Impl = ProjectManifestV0_0_1Impl;
//# sourceMappingURL=model.js.map