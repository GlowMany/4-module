{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/project/models.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {RegisteredTypes, RegistryTypes, OverrideModuleType, OverrideBundleType} from '@polkadot/types/types';\nimport {\n  CustomDataSourceAsset,\n  FileReference,\n  SubqlBlockFilter,\n  SubqlCallFilter,\n  SubqlCustomDatasource,\n  SubqlCustomHandler,\n  SubqlDatasourceKind,\n  SubqlEventFilter,\n  SubqlHandler,\n  SubqlHandlerKind,\n  SubqlMapping,\n  SubqlNetworkFilter,\n  SubqlRuntimeDatasource,\n  SubqlRuntimeHandler,\n} from '@subql/types';\nimport {plainToClass, Transform, Type} from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsInt,\n  IsOptional,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsEthereumAddress,\n} from 'class-validator';\n\nexport class BlockFilter implements SubqlBlockFilter {\n  @IsOptional()\n  @IsArray()\n  @ArrayMaxSize(2)\n  specVersion?: [number, number];\n}\n\nexport class EventFilter extends BlockFilter implements SubqlEventFilter {\n  @IsOptional()\n  @IsString()\n  module?: string;\n  @IsOptional()\n  @IsString()\n  method?: string;\n}\n\nexport class ChainTypes implements RegisteredTypes {\n  @IsObject()\n  @IsOptional()\n  types?: RegistryTypes;\n  @IsObject()\n  @IsOptional()\n  typesAlias?: Record<string, OverrideModuleType>;\n  @IsObject()\n  @IsOptional()\n  typesBundle?: OverrideBundleType;\n  @IsObject()\n  @IsOptional()\n  typesChain?: Record<string, RegistryTypes>;\n  @IsObject()\n  @IsOptional()\n  typesSpec?: Record<string, RegistryTypes>;\n}\n\nexport class CallFilter extends EventFilter implements SubqlCallFilter {\n  @IsOptional()\n  @IsBoolean()\n  success?: boolean;\n}\n\nexport class BlockHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => BlockFilter)\n  filter?: SubqlBlockFilter;\n  @IsEnum(SubqlHandlerKind, {groups: [SubqlHandlerKind.Block]})\n  kind: SubqlHandlerKind.Block;\n  @IsString()\n  handler: string;\n}\n\nexport class CallHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => CallFilter)\n  filter?: SubqlCallFilter;\n  @IsEnum(SubqlHandlerKind, {groups: [SubqlHandlerKind.Call]})\n  kind: SubqlHandlerKind.Call;\n  @IsString()\n  handler: string;\n}\n\nexport class EventHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => EventFilter)\n  filter?: SubqlEventFilter;\n  @IsEnum(SubqlHandlerKind, {groups: [SubqlHandlerKind.Event]})\n  kind: SubqlHandlerKind.Event;\n  @IsString()\n  handler: string;\n}\n\nexport class CustomHandler implements SubqlCustomHandler {\n  @IsString()\n  kind: string;\n  @IsString()\n  handler: string;\n  @IsObject()\n  @IsOptional()\n  filter?: Record<string, unknown>;\n}\n\nexport class Mapping implements SubqlMapping {\n  @Transform((params) => {\n    const handlers: SubqlHandler[] = params.value;\n    return handlers.map((handler) => {\n      switch (handler.kind) {\n        case SubqlHandlerKind.Event:\n          return plainToClass(EventHandler, handler);\n        case SubqlHandlerKind.Call:\n          return plainToClass(CallHandler, handler);\n        case SubqlHandlerKind.Block:\n          return plainToClass(BlockHandler, handler);\n        default:\n          throw new Error(`handler ${(handler as any).kind} not supported`);\n      }\n    });\n  })\n  @IsArray()\n  @ValidateNested()\n  handlers: SubqlHandler[];\n}\n\nexport class CustomMapping implements SubqlMapping<SubqlCustomHandler> {\n  @IsArray()\n  @Type(() => CustomHandler)\n  @ValidateNested()\n  handlers: CustomHandler[];\n  @IsString()\n  file: string;\n}\n\nexport class SubqlNetworkFilterImpl implements SubqlNetworkFilter {\n  @IsString()\n  @IsOptional()\n  specName?: string;\n}\n\nexport class RuntimeDataSourceBase<M extends SubqlMapping<SubqlRuntimeHandler>> implements SubqlRuntimeDatasource<M> {\n  @IsEnum(SubqlDatasourceKind, {groups: [SubqlDatasourceKind.Runtime]})\n  kind: SubqlDatasourceKind.Runtime;\n  @Type(() => Mapping)\n  @ValidateNested()\n  mapping: M;\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => SubqlNetworkFilterImpl)\n  filter?: SubqlNetworkFilter;\n}\n\nexport class FileReferenceImpl implements FileReference {\n  @IsString()\n  file: string;\n}\n\nexport class Processor<O = any> extends FileReferenceImpl {\n  @IsOptional()\n  @IsObject()\n  options?: O;\n}\n\nexport class CustomDataSourceBase<\n  K extends string,\n  T extends SubqlNetworkFilter,\n  M extends SubqlMapping = SubqlMapping<SubqlCustomHandler>,\n  O = any\n> implements SubqlCustomDatasource<K, T, M, O>\n{\n  @IsString()\n  kind: K;\n  @Type(() => CustomMapping)\n  @ValidateNested()\n  mapping: M;\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @Type(() => FileReferenceImpl)\n  @ValidateNested({each: true})\n  assets: Map<string, CustomDataSourceAsset>;\n  @Type(() => FileReferenceImpl)\n  @IsObject()\n  processor: FileReference;\n  @IsOptional()\n  @IsObject()\n  filter?: T;\n}\n"]}