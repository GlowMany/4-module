import { RegisteredTypes, RegistryTypes, OverrideModuleType, OverrideBundleType } from '@polkadot/types/types';
import { CustomDataSourceAsset, FileReference, SubqlBlockFilter, SubqlCallFilter, SubqlCustomDatasource, SubqlCustomHandler, SubqlDatasourceKind, SubqlEventFilter, SubqlHandler, SubqlHandlerKind, SubqlMapping, SubqlNetworkFilter, SubqlRuntimeDatasource, SubqlRuntimeHandler } from '@subql/types';
export declare class BlockFilter implements SubqlBlockFilter {
    specVersion?: [number, number];
}
export declare class EventFilter extends BlockFilter implements SubqlEventFilter {
    module?: string;
    method?: string;
}
export declare class ChainTypes implements RegisteredTypes {
    types?: RegistryTypes;
    typesAlias?: Record<string, OverrideModuleType>;
    typesBundle?: OverrideBundleType;
    typesChain?: Record<string, RegistryTypes>;
    typesSpec?: Record<string, RegistryTypes>;
}
export declare class CallFilter extends EventFilter implements SubqlCallFilter {
    success?: boolean;
}
export declare class BlockHandler {
    filter?: SubqlBlockFilter;
    kind: SubqlHandlerKind.Block;
    handler: string;
}
export declare class CallHandler {
    filter?: SubqlCallFilter;
    kind: SubqlHandlerKind.Call;
    handler: string;
}
export declare class EventHandler {
    filter?: SubqlEventFilter;
    kind: SubqlHandlerKind.Event;
    handler: string;
}
export declare class CustomHandler implements SubqlCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class Mapping implements SubqlMapping {
    handlers: SubqlHandler[];
}
export declare class CustomMapping implements SubqlMapping<SubqlCustomHandler> {
    handlers: CustomHandler[];
    file: string;
}
export declare class SubqlNetworkFilterImpl implements SubqlNetworkFilter {
    specName?: string;
}
export declare class RuntimeDataSourceBase<M extends SubqlMapping<SubqlRuntimeHandler>> implements SubqlRuntimeDatasource<M> {
    kind: SubqlDatasourceKind.Runtime;
    mapping: M;
    startBlock?: number;
    filter?: SubqlNetworkFilter;
}
export declare class FileReferenceImpl implements FileReference {
    file: string;
}
export declare class Processor<O = any> extends FileReferenceImpl {
    options?: O;
}
export declare class CustomDataSourceBase<K extends string, T extends SubqlNetworkFilter, M extends SubqlMapping = SubqlMapping<SubqlCustomHandler>, O = any> implements SubqlCustomDatasource<K, T, M, O> {
    kind: K;
    mapping: M;
    startBlock?: number;
    assets: Map<string, CustomDataSourceAsset>;
    processor: FileReference;
    filter?: T;
}
