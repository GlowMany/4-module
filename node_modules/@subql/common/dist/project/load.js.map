{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {NodeVM, VMScript} from '@subql/x-vm2';\nimport {plainToClass} from 'class-transformer';\nimport {validateSync} from 'class-validator';\nimport yaml from 'js-yaml';\nimport {ChainTypes} from './models';\nimport {ProjectManifestVersioned, VersionedProjectManifest} from './versioned';\n\nexport function loadFromJsonOrYaml(file: string): unknown {\n  const {ext} = path.parse(file);\n  if (ext !== '.yaml' && ext !== '.yml' && ext !== '.json') {\n    throw new Error(`Extension ${ext} not supported`);\n  }\n  const rawContent = fs.readFileSync(file, 'utf-8');\n  return yaml.load(rawContent);\n}\n\nexport function loadChainTypes(file: string, projectRoot: string) {\n  const {ext} = path.parse(file);\n  if (ext === '.js' || ext === '.cjs') {\n    return loadChainTypesFromJs(file, projectRoot);\n  } else {\n    return loadFromJsonOrYaml(file);\n  }\n}\n\nexport function loadProjectManifest(file: string): ProjectManifestVersioned {\n  let manifestPath = file;\n  if (fs.existsSync(file) && fs.lstatSync(file).isDirectory()) {\n    const yamlFilePath = path.join(file, 'project.yaml');\n    const jsonFilePath = path.join(file, 'project.json');\n    if (fs.existsSync(yamlFilePath)) {\n      manifestPath = yamlFilePath;\n    } else if (fs.existsSync(jsonFilePath)) {\n      manifestPath = jsonFilePath;\n    } else {\n      throw new Error(`Could not find project manifest under dir ${file}`);\n    }\n  }\n\n  const doc = loadFromJsonOrYaml(manifestPath);\n  const projectManifest = new ProjectManifestVersioned(doc as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n\nexport function parseChainTypes(raw: unknown): ChainTypes {\n  const chainTypes = plainToClass(ChainTypes, raw);\n  const errors = validateSync(chainTypes, {whitelist: true, forbidNonWhitelisted: true});\n  if (errors?.length) {\n    // TODO: print error details\n    const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n    throw new Error(`failed to parse chain types.\\n${errorMsgs}`);\n  }\n\n  return chainTypes;\n}\n\nfunction loadChainTypesFromJs(filePath: string, requireRoot?: string) {\n  const {base, ext} = path.parse(filePath);\n  const root = requireRoot ?? path.dirname(filePath);\n  if (ext === '.js' || ext === '.cjs') {\n    const vm = new NodeVM({\n      console: 'redirect',\n      wasm: false,\n      sandbox: {},\n      require: {\n        context: 'sandbox',\n        external: true,\n        builtin: ['path'],\n        root: root,\n        resolve: (moduleName: string) => {\n          return require.resolve(moduleName, {paths: [root]});\n        },\n      },\n      wrapper: 'commonjs',\n      sourceExtensions: ['js', 'cjs'],\n    });\n\n    let rawContent: unknown;\n    try {\n      const script = new VMScript(\n        `module.exports = require('${filePath}').default;`,\n        path.join(root, 'sandbox')\n      ).compile();\n      rawContent = vm.run(script) as unknown;\n    } catch (err) {\n      throw new Error(`\\n NodeVM error: ${err}`);\n    }\n    if (rawContent === undefined) {\n      throw new Error(`There was no default export found from required ${base} file`);\n    }\n    return rawContent;\n  } else {\n    throw new Error(`Extension ${ext} not supported`);\n  }\n}\n"]}