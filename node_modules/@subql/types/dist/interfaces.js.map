{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Extrinsic, EventRecord, SignedBlock} from '@polkadot/types/interfaces';\n\nexport interface Entity {\n  id: string;\n}\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface Store {\n  get(entity: string, id: string): Promise<Entity | null>;\n  getByField(entity: string, field: string, value): Promise<Entity[]>;\n  getOneByField(entity: string, field: string, value): Promise<Entity | null>;\n  set(entity: string, id: string, data: Entity): Promise<void>;\n  bulkCreate(entity: string, data: Entity[]): Promise<void>;\n  remove(entity: string, id: string): Promise<void>;\n}\n\nexport interface SubstrateBlock extends SignedBlock {\n  // parent block's spec version, can be used to decide the correct metadata that should be used for this block.\n  specVersion: number;\n  timestamp: Date;\n  events: EventRecord[];\n}\n\nexport interface SubstrateExtrinsic {\n  // index in the block\n  idx: number;\n  extrinsic: Extrinsic;\n  block: SubstrateBlock;\n  events: EventRecord[];\n  success: boolean;\n}\n\nexport interface SubstrateEvent extends EventRecord {\n  // index in the block\n  idx: number;\n  extrinsic?: SubstrateExtrinsic;\n  block: SubstrateBlock;\n}\n"]}