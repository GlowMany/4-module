import { Extrinsic, EventRecord, SignedBlock } from '@polkadot/types/interfaces';
export interface Entity {
    id: string;
}
export declare type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export interface Store {
    get(entity: string, id: string): Promise<Entity | null>;
    getByField(entity: string, field: string, value: any): Promise<Entity[]>;
    getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;
    set(entity: string, id: string, data: Entity): Promise<void>;
    bulkCreate(entity: string, data: Entity[]): Promise<void>;
    remove(entity: string, id: string): Promise<void>;
}
export interface SubstrateBlock extends SignedBlock {
    specVersion: number;
    timestamp: Date;
    events: EventRecord[];
}
export interface SubstrateExtrinsic {
    idx: number;
    extrinsic: Extrinsic;
    block: SubstrateBlock;
    events: EventRecord[];
    success: boolean;
}
export interface SubstrateEvent extends EventRecord {
    idx: number;
    extrinsic?: SubstrateExtrinsic;
    block: SubstrateBlock;
}
