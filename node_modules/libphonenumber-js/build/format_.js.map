{"version":3,"sources":["../source/format_.js"],"names":["DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","metadata","ext","formatNumber","input","format","options","Metadata","country","hasCountry","Error","countryCallingCode","selectNumberingPlan","phone","nationalNumber","v2","number","formatNationalNumber","carrierCode","addExtension","fromCountry","formatIDD","formatAs","chooseFormatForNumber","formats","useInternationalFormat","withNationalPrefix","nationalPrefixIsOptionalWhenFormattingInNationalFormat","nationalPrefix","availableFormats","nationalNnumber","leadingDigitsPatterns","length","lastLeadingDigitsPattern","search","pattern","fromCountryCallingCode","iddPrefix","undefined"],"mappings":"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","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat'\r\nimport Metadata, { getCountryCallingCode } from './metadata'\r\nimport getIddPrefix from './helpers/getIddPrefix'\r\nimport { formatRFC3966 } from './helpers/RFC3966'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}"],"file":"format_.js"}