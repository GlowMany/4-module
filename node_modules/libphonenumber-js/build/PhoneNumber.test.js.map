{"version":3,"sources":["../source/PhoneNumber.test.js"],"names":["describe","it","expect","PhoneNumber","to","phoneNumber","metadata","countryCallingCode","should","equal","country","number","ext","format","formatExtension","extension","isEqual","isNonGeographic","setExt","formatNational"],"mappings":"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","sourcesContent":["import metadata from '../metadata.min.json'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\ndescribe('PhoneNumber', () => {\r\n\tit('should validate constructor arguments', () => {\r\n\t\texpect(() => new PhoneNumber()).to.throw('`countryCallingCode` not passed')\r\n\t\texpect(() => new PhoneNumber('7')).to.throw('`nationalNumber` not passed')\r\n\t\texpect(() => new PhoneNumber('7', '8005553535')).to.throw('`metadata` not passed')\r\n\t})\r\n\r\n\tit('should accept country code argument', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('RU', '8005553535', metadata)\r\n\t\tphoneNumber.countryCallingCode.should.equal('7')\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should format number with options', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('7', '8005553535', metadata)\r\n\t\tphoneNumber.ext = '123'\r\n\t\tphoneNumber.format('NATIONAL', {\r\n\t\t\tformatExtension: (number, extension) => `${number} доб. ${extension}`\r\n\t\t})\r\n\t\t.should.equal('8 (800) 555-35-35 доб. 123')\r\n\t})\r\n\r\n\tit('should compare phone numbers', () => {\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('7', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553536', metadata)).should.equal(false)\r\n\t})\r\n\r\n\tit('should tell if a number is non-geographic', () => {\r\n\t\tnew PhoneNumber('7', '8005553535', metadata).isNonGeographic().should.equal(false)\r\n\t\tnew PhoneNumber('870', '773111632', metadata).isNonGeographic().should.equal(true)\r\n\t})\r\n\r\n\tit('should allow setting extension', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('1', '2133734253', metadata)\r\n\t\tphoneNumber.setExt('1234')\r\n\t\tphoneNumber.ext.should.equal('1234')\r\n\t\tphoneNumber.formatNational().should.equal('(213) 373-4253 ext. 1234')\r\n\t})\r\n})"],"file":"PhoneNumber.test.js"}