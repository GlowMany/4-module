{"version":3,"sources":["../../source/helpers/getCountryByCallingCode.js"],"names":["USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByCallingCode","callingCode","nationalPhoneNumber","metadata","isNonGeographicCallingCode","possibleCountries","getCountryCodesForCallingCode","length","selectCountryFromList","Metadata","country","leadingDigits","search","phone","undefined"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,+BAA+B,GAAG,KAAxC;;AAEe,SAASC,uBAAT,CAAiCC,WAAjC,EAA8CC,mBAA9C,EAAmEC,QAAnE,EAA6E;AAC3F;AACA,MAAIJ,+BAAJ,EAAqC;AACpC,QAAII,QAAQ,CAACC,0BAAT,CAAoCH,WAApC,CAAJ,EAAsD;AACrD,aAAO,KAAP;AACA;AACD,GAN0F,CAO3F;;;AACA,MAAMI,iBAAiB,GAAGF,QAAQ,CAACG,6BAAT,CAAuCL,WAAvC,CAA1B;;AACA,MAAI,CAACI,iBAAL,EAAwB;AACvB;AACA,GAX0F,CAY3F;AACA;;;AACA,MAAIA,iBAAiB,CAACE,MAAlB,KAA6B,CAAjC,EAAoC;AACnC,WAAOF,iBAAiB,CAAC,CAAD,CAAxB;AACA;;AACD,SAAOG,qBAAqB,CAACH,iBAAD,EAAoBH,mBAApB,EAAyCC,QAAQ,CAACA,QAAlD,CAA5B;AACA;;AAED,SAASK,qBAAT,CAA+BH,iBAA/B,EAAkDH,mBAAlD,EAAuEC,QAAvE,EAAiF;AAChF;AACAA,EAAAA,QAAQ,GAAG,IAAIM,oBAAJ,CAAaN,QAAb,CAAX;;AACA,uBAAsBE,iBAAtB,kHAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QAA9BK,OAA8B;AACxCP,IAAAA,QAAQ,CAACO,OAAT,CAAiBA,OAAjB,EADwC,CAExC;AACA;AACA;AACA;;AACA,QAAIP,QAAQ,CAACQ,aAAT,EAAJ,EAA8B;AAC7B,UAAIT,mBAAmB,IACtBA,mBAAmB,CAACU,MAApB,CAA2BT,QAAQ,CAACQ,aAAT,EAA3B,MAAyD,CAD1D,EAC6D;AAC5D,eAAOD,OAAP;AACA;AACD,KALD,CAMA;AACA;AAPA,SAQK,IAAI,+BAAc;AAAEG,QAAAA,KAAK,EAAEX,mBAAT;AAA8BQ,QAAAA,OAAO,EAAPA;AAA9B,OAAd,EAAuDI,SAAvD,EAAkEX,QAAQ,CAACA,QAA3E,CAAJ,EAA0F;AAC9F,eAAOO,OAAP;AACA;AACD;AACD","sourcesContent":["import Metadata from '../metadata'\r\nimport getNumberType from './getNumberType'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest and fastest one.\r\n\t\t// Leading digits patterns are only defined for about 20% of all countries.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// Matching \"leading digits\" is a sufficient but not necessary condition.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}"],"file":"getCountryByCallingCode.js"}