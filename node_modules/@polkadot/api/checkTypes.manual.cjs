"use strict";

var _api = require("@polkadot/api");

var _testingPairs = require("@polkadot/keyring/testingPairs");

var _create = require("@polkadot/types/create");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Simple non-runnable checks to test type definitions in the editor itself
const registry = new _create.TypeRegistry();

function consts(api) {
  // constants has actual value & metadata
  console.log(api.consts.foo.bar, api.consts.balances.existentialDeposit.toNumber(), api.consts.balances.existentialDeposit.meta.docs.map(s => s.toString()).join(''), api.consts.system.blockWeights.maxBlock.divn(123).toNumber());
}

async function derive(api) {
  await api.derive.chain.subscribeNewHeads(header => {
    console.log('current author:', header.author);
  });
  const fees = await api.derive.balances.fees();
  console.log('fees', fees);
}

function errors(api) {
  const someError = {}; // existing

  console.log(api.errors.vesting.AmountLow.is(someError)); // non-existing error, existing module

  console.log(api.errors.vesting.Something.is(someError)); // something random

  console.log(api.errors.something.Random.is(someError));
}

function events(api) {
  const event = {}; // existing

  if (api.events.balances.Transfer.is(event)) {
    // the types are correctly expanded
    const [from, to, amount] = event.data;
    console.log(from.toHuman(), to.toHuman(), amount.toBn());
  } // something random


  if (api.events.something.Random.is(event)) {
    // the types are just codec
    const [a, b] = event.data;
    console.log(a.toHuman(), b.toHuman());
  }
}

async function query(api, pairs) {
  const intentions = await api.query.staking.bonded();
  console.log('intentions:', intentions); // api.query.*.* is well-typed

  const bar = await api.query.foo.bar(); // bar is Codec (unknown module)

  const bal = await api.query.balances.totalIssuance(); // bal is Balance

  const bal2 = await api.query.balances.totalIssuance('WRONG_ARG'); // bal2 is Codec (wrong args)

  const override = await api.query.balances.totalIssuance(); // override is still available

  const oldBal = await api.query.balances.totalIssuance.at('abcd'); // For older queries we can cast with `<Balance>` (newer chain have multi typed)

  const multia = await api.query.balances.freeBalance.multi([pairs.alice.address, pairs.bob.address]);
  const multib = await api.query.system.account.multi([pairs.alice.address, pairs.bob.address]);
  console.log('query types:', bar, bal, bal2, override, oldBal, multia, multib);
}

async function queryExtra(api, pairs) {
  // events destructing
  await api.query.system.events(records => {
    records.forEach(_ref => {
      let {
        event,
        phase
      } = _ref;

      if (phase.isApplyExtrinsic) {
        // Dunno... this should work
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const [accountId, value] = event.data;
        console.log(`${accountId.toString()} has ${value.toHuman()}`);
      }
    });
  }); // at queries

  const events = await api.query.system.events.at('0x12345');
  console.log(`Received ${events.length} events:`); // check entries()

  await api.query.system.account.entries(); // should not take a param

  await api.query.staking.nominatorSlashInEra.entries(123); // should take a param
  // nmap with keys

  await api.query.assets.approvals.keys(123, 'blah');
  await api.query.assets.account.keys(123);
  await api.query.assets.account.entries(123);
  await api.query.assets.blah.keys(); // check range

  await api.query.balances.freeBalance.range(['0x1234'], pairs.bob.address); // check range types

  const entries = await api.query.system.events.range(['0x12345', '0x7890']);
  console.log(`Received ${entries.length} entries, ${entries.map(_ref2 => {
    let [hash, events] = _ref2;
    return `${hash.toHex()}: ${events.length} events`;
  }).join(', ')}`); // is

  const key = {};

  if (api.query.balances.account.is(key)) {
    const [accountId] = key.args; // should be AccountId type

    console.log(accountId.toHuman());
  }
}

async function queryMulti(api, pairs) {
  // check multi for unsub
  const multiUnsub = await api.queryMulti([[api.query.staking.validators], [api.query.system.events]], values => {
    console.log('values', values);
    multiUnsub();
  }); // check multi , Promise result

  const multiRes = await api.queryMulti([[api.query.system.account, pairs.eve.address], // older chains only
  [api.query.system.accountNonce, pairs.eve.address]]);
  console.log(multiRes); // check multi, via at

  const apiAt = await api.at('0x12345678');
  const multiResAt = await apiAt.queryMulti([api.query.timestamp.now, [apiAt.query.staking.validators], [apiAt.query.system.account, pairs.eve.address]]);
  console.log(multiResAt);
}

async function rpc(api) {
  // defaults
  await api.rpc.chain.subscribeNewHeads(header => {
    console.log('current header #', header.number.toNumber());
  }); // with generic params

  await api.rpc.state.subscribeStorage(['my_balance_key'], _ref3 => {
    let [balance] = _ref3;
    console.log('current balance:', balance.toString());
  }); // using json & raw

  await api.rpc.chain.getBlock.raw('0x123456'); // using raw subs

  await api.rpc.chain.subscribeNewHeads.raw(result => {
    console.log(result);
  });
}

function types(api) {
  // check correct types with `createType`
  const balance = registry.createType('Balance', 2);
  const gas = registry.createType('Gas', 2);
  const compact = registry.createType('Compact<u32>', 2); // const random = registry.createType('RandomType', 2); // This one should deliberately show a TS error

  const gasUnsafe = (0, _create.createTypeUnsafe)(registry, 'Gas', [2]);
  const overriddenUnsafe = (0, _create.createTypeUnsafe)(registry, 'Gas', [2]);
  console.log(balance, gas, compact, gasUnsafe, overriddenUnsafe, api.createType('AccountData'));
}

async function tx(api, pairs) {
  // transfer, also allows for bigint inputs here
  const transfer = api.tx.balances.transfer(pairs.bob.address, BigInt(123456789));
  console.log('transfer casted', transfer, transfer); // simple "return the hash" variant

  console.log('hash:', (await transfer.signAndSend(pairs.alice)).toHex()); // passing options, but waiting for hash

  const nonce = await api.query.system.accountNonce(pairs.alice.address);
  (await api.tx.balances.transfer(pairs.bob.address, 12345).signAndSend(pairs.alice, {
    nonce
  })).toHex(); // just with the callback

  await api.tx.balances.transfer(pairs.bob.address, 12345).signAndSend(pairs.alice, _ref4 => {
    let {
      status
    } = _ref4;
    return console.log(status.type);
  }); // with options and the callback

  const nonce2 = await api.query.system.accountNonce(pairs.alice.address);
  const unsub2 = await api.tx.balances.transfer(pairs.bob.address, 12345).signAndSend(pairs.alice, {
    nonce: nonce2
  }, _ref5 => {
    let {
      status
    } = _ref5;
    console.log('transfer status:', status.type);
    unsub2();
  }); // it allows for query & then using the submittable

  const second = api.tx.democracy.second(123, 5); // eslint-disable-next-line @typescript-eslint/no-floating-promises

  await second.signAndSend('123', result => console.log(result)); // it handles enum inputs correctly

  await api.tx.democracy.proxyVote(123, {
    Split: {
      nay: 456,
      yay: 123
    }
  }).signAndSend(pairs.alice); // is

  if (api.tx.balances.transfer.is(second)) {
    const [recipientId, balance] = second.args; // should be LookupSource & Balance types

    console.log(recipientId.toHuman(), balance.toNumber());
  }
}

async function at(api) {
  const apiAt = await api.at('0x1234'); // get old balances

  console.log(await apiAt.query.balances.freeBalance('0x1234')); // get some constants

  console.log(apiAt.consts.balances.existentialDeposit);
}

async function main() {
  const api = await _api.ApiPromise.create();
  const pairs = (0, _testingPairs.createTestPairs)(); // eslint-disable-next-line @typescript-eslint/no-floating-promises

  Promise.all([consts(api), derive(api), errors(api), events(api), query(api, pairs), queryExtra(api, pairs), queryMulti(api, pairs), rpc(api), types(api), tx(api, pairs), at(api)]);
} // eslint-disable-next-line @typescript-eslint/unbound-method


main().catch(console.error);