import type { Codec, Constructor, Registry } from '../types';
import { Base } from './Base';
export declare class WrapperOpaque<T extends Codec> extends Base<T> {
    constructor(registry: Registry, Type: Constructor<T> | string, value?: unknown);
    static with<T extends Codec>(Type: Constructor<T> | string): Constructor<WrapperOpaque<T>>;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    toU8a(isBare?: boolean): Uint8Array;
    /**
     * @description Return the inner value for the wrapped type
     */
    unwrap(): T;
}
