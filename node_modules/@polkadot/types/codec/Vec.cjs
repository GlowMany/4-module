"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vec = void 0;
exports.decodeVec = decodeVec;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _AbstractArray = require("./AbstractArray.cjs");

var _index = require("./utils/index.cjs");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MAX_LENGTH = 64 * 1024;
const l = (0, _util.logger)('Vec');

function decodeVec(registry, Type, value) {
  let length = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;

  if (Array.isArray(value)) {
    const result = new Array(value.length);

    for (let i = 0; i < value.length; i++) {
      const entry = value[i];

      try {
        result[i] = entry instanceof Type ? entry : new Type(registry, entry);
      } catch (error) {
        l.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }

    return [result, 0, 0];
  }

  const u8a = (0, _util.u8aToU8a)(value);
  let offset = 0;

  if (length === -1) {
    const [_offset, _length] = (0, _util.compactFromU8a)(u8a);
    (0, _util.assert)(_length.lten(MAX_LENGTH), () => `Vec length ${_length.toString()} exceeds ${MAX_LENGTH}`);
    length = _length.toNumber();
    offset = _offset;
  }

  return (0, _index.decodeU8aVec)(registry, u8a, offset, Type, length);
}
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */


var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

class Vec extends _AbstractArray.AbstractArray {
  constructor(registry, Type) {
    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    const Clazz = (0, _index.typeToConstructor)(registry, Type);
    const [values, decodedLength] = decodeVec(registry, Clazz, value);
    super(registry, values, decodedLength);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = Clazz;
  }

  static with(Type) {
    return class extends Vec {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type].name;
  }
  /**
   * @description Finds the index of the value in the array
   */


  indexOf(_other) {
    // convert type first, this removes overhead from the eq
    const other = _other instanceof (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] ? _other : new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry, _other);

    for (let i = 0; i < this.length; i++) {
      if (other.eq(this[i])) {
        return i;
      }
    }

    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Vec<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType()}>`;
  }

}

exports.Vec = Vec;