// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { compactAddLength, compactStripLength, isU8a } from '@polkadot/util';
import { Base } from "./Base.js";
import { typeToConstructor } from "./utils/index.js";

function decodeRaw(registry, Type, value) {
  const Clazz = typeToConstructor(registry, Type);

  if (isU8a(value)) {
    const [, u8a] = compactStripLength(value);
    return new Clazz(registry, u8a);
  }

  return new Clazz(registry, value);
}

export class WrapperOpaque extends Base {
  constructor(registry, Type, value) {
    super(registry, decodeRaw(registry, Type, value));
  }

  static with(Type) {
    return class extends WrapperOpaque {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `WrapperOpaque<${this._raw.toRawType()}>`;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  toU8a(isBare) {
    const u8a = super.toU8a(isBare);
    return isBare ? u8a : compactAddLength(u8a);
  }
  /**
   * @description Return the inner value for the wrapped type
   */


  unwrap() {
    return this._raw;
  }

}