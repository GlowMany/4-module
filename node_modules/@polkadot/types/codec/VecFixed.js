import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { assert, isU8a, u8aConcat } from '@polkadot/util';
import { AbstractArray } from "./AbstractArray.js";
import { decodeU8aVec, typeToConstructor } from "./utils/index.js";
import { decodeVec } from "./Vec.js";
/** @internal */

function decodeVecFixed(registry, value, Type, length) {
  const [values, decodedLength, decodedLengthNoOffset] = decodeVec(registry, Type, value, length);

  while (values.length < length) {
    values.push(new Type(registry));
  }

  assert(values.length === length, () => `Expected a length of exactly ${length} entries`);
  return [values, decodedLength, decodedLengthNoOffset];
}
/**
 * @name VecFixed
 * @description
 * This manages codec arrays of a fixed length
 */


var _Type = /*#__PURE__*/_classPrivateFieldLooseKey("Type");

export class VecFixed extends AbstractArray {
  constructor(registry, Type, length, value = []) {
    const Clazz = typeToConstructor(registry, Type);
    const [values,, decodedLengthNoOffset] = isU8a(value) ? decodeU8aVec(registry, value, 0, Clazz, length) : decodeVecFixed(registry, value, Clazz, length);
    super(registry, values, decodedLengthNoOffset);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _Type)[_Type] = Clazz;
  }

  static with(Type, length) {
    return class extends VecFixed {
      constructor(registry, value) {
        super(registry, Type, length, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return new (_classPrivateFieldLooseBase(this, _Type)[_Type])(this.registry).toRawType();
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }

  toU8a() {
    // we override, we don't add the length prefix for ourselves, and at the same time we
    // ignore isBare on entries, since they should be properly encoded at all times
    const encoded = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      encoded[i] = this[i].toU8a();
    }

    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `[${this.Type};${this.length}]`;
  }

}