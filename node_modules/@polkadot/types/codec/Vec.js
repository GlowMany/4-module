import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { assert, compactFromU8a, logger, u8aToU8a } from '@polkadot/util';
import { AbstractArray } from "./AbstractArray.js";
import { decodeU8aVec, typeToConstructor } from "./utils/index.js";
const MAX_LENGTH = 64 * 1024;
const l = logger('Vec');
export function decodeVec(registry, Type, value, length = -1) {
  if (Array.isArray(value)) {
    const result = new Array(value.length);

    for (let i = 0; i < value.length; i++) {
      const entry = value[i];

      try {
        result[i] = entry instanceof Type ? entry : new Type(registry, entry);
      } catch (error) {
        l.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }

    return [result, 0, 0];
  }

  const u8a = u8aToU8a(value);
  let offset = 0;

  if (length === -1) {
    const [_offset, _length] = compactFromU8a(u8a);
    assert(_length.lten(MAX_LENGTH), () => `Vec length ${_length.toString()} exceeds ${MAX_LENGTH}`);
    length = _length.toNumber();
    offset = _offset;
  }

  return decodeU8aVec(registry, u8a, offset, Type, length);
}
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */

var _Type = /*#__PURE__*/_classPrivateFieldLooseKey("Type");

export class Vec extends AbstractArray {
  constructor(registry, Type, value = []) {
    const Clazz = typeToConstructor(registry, Type);
    const [values, decodedLength] = decodeVec(registry, Clazz, value);
    super(registry, values, decodedLength);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _Type)[_Type] = Clazz;
  }

  static with(Type) {
    return class extends Vec {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return _classPrivateFieldLooseBase(this, _Type)[_Type].name;
  }
  /**
   * @description Finds the index of the value in the array
   */


  indexOf(_other) {
    // convert type first, this removes overhead from the eq
    const other = _other instanceof _classPrivateFieldLooseBase(this, _Type)[_Type] ? _other : new (_classPrivateFieldLooseBase(this, _Type)[_Type])(this.registry, _other);

    for (let i = 0; i < this.length; i++) {
      if (other.eq(this[i])) {
        return i;
      }
    }

    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Vec<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || new (_classPrivateFieldLooseBase(this, _Type)[_Type])(this.registry).toRawType()}>`;
  }

}