// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { formatDecimal, formatNumber } from "../index.js"; // eslint-disable-next-line @typescript-eslint/no-explicit-any

function loop(count, inputs, exec) {
  const start = Date.now();
  const results = new Array(inputs.length);

  for (let i = 0; i < count; i++) {
    const result = exec(...inputs[i % inputs.length]);

    if (i < inputs.length) {
      results[i] = result;
    }
  }

  return [Date.now() - start, results];
}

export function formatFixed(value) {
  const [a, b] = value.toFixed(2).split('.');
  return [formatDecimal(a), b].join('.');
}
export function formatOps(count, time) {
  const micro = time * 1000 / count;
  const ops = 1000000 / micro;
  return `
${formatFixed(ops).padStart(15 + 20)} ops/s
${formatFixed(micro).padStart(15 + 20)} Î¼s/op`;
}
export function performance(name, count, inputs, exec) {
  it(`performance: ${name}`, () => {
    const [time] = loop(count, inputs, exec);
    console.log(`
performance run for ${name} completed with ${formatNumber(count)} iterations.

${`${name}:`.padStart(19)} ${time.toString().padStart(15)} ms${formatOps(count, time)}
`);
  });
}
export function performanceCmp(name, [first, second], count, inputs, exec) {
  it(`performance: ${name}`, () => {
    const pa = inputs.map(values => [...values, false]);
    const pb = inputs.map(values => [...values, true]);
    const [ta, ra] = loop(count, pa, exec);
    const [tb, rb] = loop(count, pb, exec);
    console.log(`
performance run for ${name} completed with ${formatNumber(count)} iterations.

${`${first}:`.padStart(19)} ${ta.toString().padStart(15)} ms ${ta < tb ? '(fastest)' : `(slowest, ${(ta / tb).toFixed(2)}x)`}${formatOps(count, ta)}

${`${second}:`.padStart(19)} ${tb.toString().padStart(15)} ms ${ta > tb ? '(fastest)' : `(slowest, ${(tb / ta).toFixed(2)}x)`}${formatOps(count, tb)}
`);
    const unmatched = ra.filter((r, i) => JSON.stringify(r) !== JSON.stringify(rb[i]));
    expect(unmatched.length).toEqual(0);
  });
}