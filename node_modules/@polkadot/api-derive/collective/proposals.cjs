"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasProposals = hasProposals;
exports.proposal = proposal;
exports.proposalHashes = exports.proposalCount = void 0;
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.cjs");

var _helpers = require("./helpers.cjs");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parse(api, _ref) {
  let [hashes, proposals, votes] = _ref;
  return proposals.map((o, index) => o && o.isSome ? {
    hash: api.registry.createType('Hash', hashes[index]),
    proposal: o.unwrap(),
    votes: votes[index].unwrapOr(null)
  } : null).filter(proposal => !!proposal);
}

function _proposalsFrom(section, api, hashes) {
  var _api$query$section;

  return ((0, _util.isFunction)((_api$query$section = api.query[section]) === null || _api$query$section === void 0 ? void 0 : _api$query$section.proposals) && hashes.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(hashes), // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
  // however we have had cases on Edgeware where the indices have moved around after an
  // upgrade, which results in invalid on-chain data
  (0, _rxjs.combineLatest)(hashes.map(h => api.query[section].proposalOf(h).pipe((0, _rxjs.catchError)(() => (0, _rxjs.of)(null))))), api.query[section].voting.multi(hashes)]) : (0, _rxjs.of)([[], [], []])).pipe((0, _rxjs.map)(r => parse(api, r)));
}

function hasProposals(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => () => {
    var _api$query$section2;

    return (0, _rxjs.of)((0, _util.isFunction)((_api$query$section2 = api.query[section]) === null || _api$query$section2 === void 0 ? void 0 : _api$query$section2.proposals));
  });
}

function proposals(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => () => api.derive[section].proposalHashes().pipe((0, _rxjs.switchMap)(all => _proposalsFrom(section, api, all))));
}

function proposal(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => hash => {
    var _api$query$section3;

    return (0, _util.isFunction)((_api$query$section3 = api.query[section]) === null || _api$query$section3 === void 0 ? void 0 : _api$query$section3.proposals) ? (0, _index.firstObservable)(_proposalsFrom(section, api, [hash])) : (0, _rxjs.of)(null);
  });
}

const proposalCount = (0, _helpers.callMethod)('proposalCount', null);
exports.proposalCount = proposalCount;
const proposalHashes = (0, _helpers.callMethod)('proposals', []);
exports.proposalHashes = proposalHashes;