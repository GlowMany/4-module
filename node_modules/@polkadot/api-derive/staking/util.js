// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { combineLatest, of, switchMap } from 'rxjs';
import { memo } from "../util/index.js";
export function filterEras(eras, list) {
  return eras.filter(e => !list.some(({
    era
  }) => e.eq(era)));
}
export function erasHistoricApply(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](e, withActive))));
}
export function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](accountId, e, withActive))));
}
export function singleEra(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, era => api.derive.staking[fn](era, true));
}
export function combineEras(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, (eras, withActive) => // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  eras.length ? combineLatest(eras.map(e => api.derive.staking[fn](e, withActive))) : of([]));
}