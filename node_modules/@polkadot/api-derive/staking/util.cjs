"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineEras = combineEras;
exports.erasHistoricApply = erasHistoricApply;
exports.erasHistoricApplyAccount = erasHistoricApplyAccount;
exports.filterEras = filterEras;
exports.singleEra = singleEra;

var _rxjs = require("rxjs");

var _index = require("../util/index.cjs");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterEras(eras, list) {
  return eras.filter(e => !list.some(_ref => {
    let {
      era
    } = _ref;
    return e.eq(era);
  }));
}

function erasHistoricApply(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, function () {
    let withActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(e => api.derive.staking[fn](e, withActive)));
  });
}

function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, function (accountId) {
    let withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(e => api.derive.staking[fn](accountId, e, withActive)));
  });
}

function singleEra(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, era => api.derive.staking[fn](era, true));
}

function combineEras(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, (eras, withActive) => // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  eras.length ? (0, _rxjs.combineLatest)(eras.map(e => api.derive.staking[fn](e, withActive))) : (0, _rxjs.of)([]));
}